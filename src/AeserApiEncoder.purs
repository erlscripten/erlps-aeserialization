module Aeser.Api.Encoder(erlps__encode__2, erlps__decode__1,
                         erlps__safe_decode__2,
                         erlps__byte_size_for_type__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__encode__2 :: ErlangFun
erlps__encode__2 [(ErlangAtom "id_hash"), payload_0] =
  let
    match_expr_4 =
      (BIF.do_remote_fun_call "Aeser.Id" "erlps__specialize__1"
         [payload_0])
  in
    case match_expr_4 of
      (ErlangTuple [idtype_2, val_3]) ->
        let arg_5 = (erlps__id2type__1 [idtype_2])
        in (erlps__encode__2 [arg_5, val_3])
      _ -> (EXC.badmatch match_expr_4)
erlps__encode__2 [type_0, payload_1] =
  let    pfx_3 = (erlps__type2pfx__1 [type_0])
  in let case_4 = (erlps__type2enc__1 [type_0])
  in let
    enc_10 =
      case case_4 of
        (ErlangInt num_6) | ((ErlangInt num_6) ==
                               (ErlangInt (DBI.fromInt 1))) ->
          (erlps__base58_check__1 [payload_1])
        (ErlangInt num_8) | ((ErlangInt num_8) ==
                               (ErlangInt (DBI.fromInt 2))) ->
          (erlps__base64_check__1 [payload_1])
        something_else -> (EXC.case_clause something_else)
  in
    (ErlangBinary
       (BIN.concat
          [(BIN.format_bin pfx_3 (BIN.packed_size pfx_3) 8),
           (BIN.from_int (ErlangInt (DBI.fromInt 95))
              (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
           (BIN.format_bin enc_10 (BIN.packed_size enc_10) 8)]))
erlps__encode__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__encode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decode__1 :: ErlangFun
erlps__decode__1 [bin0_0] =
  let case_1 = (erlps__split__1 [bin0_0])
  in
    case case_1 of
      (ErlangCons pfx_3 (ErlangCons payload_4 (ErlangEmptyList))) ->
        let    type_6 = (erlps__pfx2type__1 [pfx_3])
        in let bin_9 = (erlps__decode_check__2 [type_6, payload_4])
        in let case_10 = (erlps__type_size_check__2 [type_6, bin_9])
        in
          case case_10 of
            (ErlangAtom "ok") -> (ErlangTuple [type_6, bin_9])
            (ErlangTuple [(ErlangAtom "error"), reason_15]) ->
              (BIF.erlang__error__1 [reason_15])
            something_else -> (EXC.case_clause something_else)
      x_17 ->
        let
          arg_18 =
            (ErlangTuple [(ErlangAtom "missing_prefix"), bin0_0, x_17])
        in (BIF.erlang__error__1 [arg_18])
      something_else -> (EXC.case_clause something_else)
erlps__decode__1 [arg_22] = (EXC.function_clause unit)
erlps__decode__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type_size_check__2 :: ErlangFun
erlps__type_size_check__2 [type_0, bin_1] =
  let case_2 = (erlps__byte_size_for_type__1 [type_0])
  in
    case case_2 of
      (ErlangAtom "not_applicable") -> (ErlangAtom "ok")
      correctsize_4 ->
        let    size_6 = (BIF.erlang__byte_size__1 [bin_1])
        in let case_7 = (BIF.erlang__op_exactEq [size_6, correctsize_4])
        in
          case case_7 of
            (ErlangAtom "true") -> (ErlangAtom "ok")
            (ErlangAtom "false") ->
              (ErlangTuple
                 [(ErlangAtom "error"), (ErlangAtom "incorrect_size")])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__type_size_check__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__type_size_check__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__safe_decode__2 :: ErlangFun
erlps__safe_decode__2 [(ErlangTuple [(ErlangAtom "id_hash"),
                                     allowedtypes_0]),
                       enc_1]
  =
  (EXC.tryOfCatch (\ _ -> (erlps__decode__1 [enc_1]))
     (\ of_3 ->
        case of_3 of
          (ErlangTuple [actualtype_5, dec_6]) ->
            let
              case_7 = (BIF.lists__member__2 [actualtype_5, allowedtypes_0])
            in
              case case_7 of
                (ErlangAtom "true") ->
                  (EXC.tryCatch
                     (\ _ ->
                        let    arg_12 = (erlps__type2id__1 [actualtype_5])
                        in let
                          tup_el_11 =
                            (BIF.do_remote_fun_call "Aeser.Id"
                               "erlps__create__2" [arg_12, dec_6])
                        in (ErlangTuple [(ErlangAtom "ok"), tup_el_11]))
                     (\ ex_16 ->
                        case ex_16 of
                          (ErlangTuple [(ErlangAtom "error"), _, _]) ->
                            (ErlangTuple
                               [(ErlangAtom "error"),
                                (ErlangAtom "invalid_prefix")])
                          ex_16 -> (EXC.raise ex_16)))
                (ErlangAtom "false") ->
                  (ErlangTuple
                     [(ErlangAtom "error"), (ErlangAtom "invalid_prefix")])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.try_clause something_else))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [(ErlangAtom "error"), _, _]) ->
            (ErlangTuple
               [(ErlangAtom "error"), (ErlangAtom "invalid_encoding")])
          ex_4 -> (EXC.raise ex_4)))
erlps__safe_decode__2 [(ErlangAtom "block_hash"), enc_0] =
  (EXC.tryOfCatch (\ _ -> (erlps__decode__1 [enc_0]))
     (\ of_2 ->
        case of_2 of
          (ErlangTuple [(ErlangAtom "key_block_hash"), dec_4]) ->
            (ErlangTuple [(ErlangAtom "ok"), dec_4])
          (ErlangTuple [(ErlangAtom "micro_block_hash"), dec_7]) ->
            (ErlangTuple [(ErlangAtom "ok"), dec_7])
          (ErlangTuple [_, _]) ->
            (ErlangTuple
               [(ErlangAtom "error"), (ErlangAtom "invalid_prefix")])
          something_else -> (EXC.try_clause something_else))
     (\ ex_3 ->
        case ex_3 of
          (ErlangTuple [(ErlangAtom "error"), _, _]) ->
            (ErlangTuple
               [(ErlangAtom "error"), (ErlangAtom "invalid_encoding")])
          ex_3 -> (EXC.raise ex_3)))
erlps__safe_decode__2 [type_0, enc_1] =
  (EXC.tryOfCatch (\ _ -> (erlps__decode__1 [enc_1]))
     (\ of_3 ->
        case of_3 of
          (ErlangTuple [type_5, dec_6]) | (type_5 == type_0) ->
            (ErlangTuple [(ErlangAtom "ok"), dec_6])
          (ErlangTuple [_, _]) ->
            (ErlangTuple
               [(ErlangAtom "error"), (ErlangAtom "invalid_prefix")])
          something_else -> (EXC.try_clause something_else))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [(ErlangAtom "error"), _, _]) ->
            (ErlangTuple
               [(ErlangAtom "error"), (ErlangAtom "invalid_encoding")])
          ex_4 -> (EXC.raise ex_4)))
erlps__safe_decode__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__safe_decode__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decode_check__2 :: ErlangFun
erlps__decode_check__2 [type_0, bin_1] =
  let    case_2 = (erlps__type2enc__1 [type_0])
  in let
    dec_8 =
      case case_2 of
        (ErlangInt num_4) | ((ErlangInt num_4) ==
                               (ErlangInt (DBI.fromInt 1))) ->
          (erlps__base58_to_binary__1 [bin_1])
        (ErlangInt num_6) | ((ErlangInt num_6) ==
                               (ErlangInt (DBI.fromInt 2))) ->
          (erlps__base64_to_binary__1 [bin_1])
        something_else -> (EXC.case_clause something_else)
  in let sz_10 = (BIF.erlang__byte_size__1 [dec_8])
  in let
    bsz_13 =
      (BIF.erlang__op_minus [sz_10, (ErlangInt (DBI.fromInt 4))])
  in
    case dec_8 of
      (ErlangBinary bin_c_14) | (ErlangInt size_15) <- (bsz_13)
                              , (BIN.Ok body_17 bin_16) <-
                                  ((BIN.chop_bin bin_c_14 size_15 8))
                              , size_18 <- ((DBI.fromInt 4))
                              , (BIN.Ok c_20 bin_19) <-
                                  ((BIN.chop_bin bin_16 size_18 8))
                              , (BIN.empty bin_19) ->
        let match_expr_24 = (erlps__check_str__1 [body_17])
        in
          case match_expr_24 of
            c_23 | (c_23 == c_20) -> body_17
            _ -> (EXC.badmatch match_expr_24)
      _ -> (EXC.badmatch dec_8)
erlps__decode_check__2 [arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__decode_check__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__base64_check__1 :: ErlangFun
erlps__base64_check__1 [bin_0] =
  let    c_2 = (erlps__check_str__1 [bin_0])
  in let
    arg_3 =
      (BIF.erlang__iolist_to_binary__1
         [(ErlangCons bin_0 (ErlangCons c_2 ErlangEmptyList))])
  in (erlps__binary_to_base64__1 [arg_3])
erlps__base64_check__1 [arg_9] = (EXC.function_clause unit)
erlps__base64_check__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__base58_check__1 :: ErlangFun
erlps__base58_check__1 [bin_0] =
  let    c_2 = (erlps__check_str__1 [bin_0])
  in let
    arg_3 =
      (BIF.erlang__iolist_to_binary__1
         [(ErlangCons bin_0 (ErlangCons c_2 ErlangEmptyList))])
  in (erlps__binary_to_base58__1 [arg_3])
erlps__base58_check__1 [arg_9] = (EXC.function_clause unit)
erlps__base58_check__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__1 :: ErlangFun
erlps__split__1 [bin_0] =
  let
    head_3 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 95))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (BIF.binary__split__3
       [bin_0, (ErlangCons head_3 ErlangEmptyList), ErlangEmptyList])
erlps__split__1 [arg_7] = (EXC.function_clause unit)
erlps__split__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_str__1 :: ErlangFun
erlps__check_str__1 [bin_0] =
  let    arg_1 = (erlps__sha256_hash__1 [bin_0])
  in let match_expr_9 = (erlps__sha256_hash__1 [arg_1])
  in
    case match_expr_9 of
      (ErlangBinary bin_c_3) | size_4 <- ((DBI.fromInt 32))
                             , (BIN.Ok c_6 bin_5) <-
                                 ((BIN.chop_bin bin_c_3 size_4 1))
                             , (ErlangInt size_7) <- ((BIN.size bin_5))
                             , (BIN.Ok _ bin_8) <-
                                 ((BIN.chop_bin bin_5 size_7 8))
                             , (BIN.empty bin_8) ->
        c_6
      _ -> (EXC.badmatch match_expr_9)
erlps__check_str__1 [arg_10] = (EXC.function_clause unit)
erlps__check_str__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sha256_hash__1 :: ErlangFun
erlps__sha256_hash__1 [bin_0] =
  (BIF.do_remote_fun_call "Crypto" "erlps__hash__2"
     [(ErlangAtom "sha256"), bin_0])
erlps__sha256_hash__1 [arg_3] = (EXC.function_clause unit)
erlps__sha256_hash__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__id2type__1 :: ErlangFun
erlps__id2type__1 [(ErlangAtom "account")] =
  (ErlangAtom "account_pubkey")
erlps__id2type__1 [(ErlangAtom "channel")] =
  (ErlangAtom "channel")
erlps__id2type__1 [(ErlangAtom "commitment")] =
  (ErlangAtom "commitment")
erlps__id2type__1 [(ErlangAtom "contract")] =
  (ErlangAtom "contract_pubkey")
erlps__id2type__1 [(ErlangAtom "name")] = (ErlangAtom "name")
erlps__id2type__1 [(ErlangAtom "oracle")] =
  (ErlangAtom "oracle_pubkey")
erlps__id2type__1 [arg_0] = (EXC.function_clause unit)
erlps__id2type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type2id__1 :: ErlangFun
erlps__type2id__1 [(ErlangAtom "account_pubkey")] =
  (ErlangAtom "account")
erlps__type2id__1 [(ErlangAtom "channel")] =
  (ErlangAtom "channel")
erlps__type2id__1 [(ErlangAtom "commitment")] =
  (ErlangAtom "commitment")
erlps__type2id__1 [(ErlangAtom "contract_pubkey")] =
  (ErlangAtom "contract")
erlps__type2id__1 [(ErlangAtom "name")] = (ErlangAtom "name")
erlps__type2id__1 [(ErlangAtom "oracle_pubkey")] =
  (ErlangAtom "oracle")
erlps__type2id__1 [arg_0] = (EXC.function_clause unit)
erlps__type2id__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type2enc__1 :: ErlangFun
erlps__type2enc__1 [(ErlangAtom "key_block_hash")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "micro_block_hash")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "block_pof_hash")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "block_tx_hash")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "block_state_hash")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "channel")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "contract_pubkey")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1 [(ErlangAtom "contract_bytearray")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1 [(ErlangAtom "contract_store_key")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1 [(ErlangAtom "contract_store_value")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1 args = (erlps__type2enc__1__p1 args)

erlps__type2enc__1__p1 :: ErlangFun
erlps__type2enc__1__p1 [(ErlangAtom "transaction")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p1 [(ErlangAtom "tx_hash")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 [(ErlangAtom "oracle_pubkey")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 [(ErlangAtom "oracle_query")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p1 [(ErlangAtom "oracle_query_id")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 [(ErlangAtom "oracle_response")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p1 [(ErlangAtom "account_pubkey")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 [(ErlangAtom "signature")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 [(ErlangAtom "commitment")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 [(ErlangAtom "peer_pubkey")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p1 args = (erlps__type2enc__1__p2 args)

erlps__type2enc__1__p2 :: ErlangFun
erlps__type2enc__1__p2 [(ErlangAtom "name")] =
  (ErlangInt (DBI.fromInt 1))
erlps__type2enc__1__p2 [(ErlangAtom "state")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p2 [(ErlangAtom "poi")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p2 [(ErlangAtom "state_trees")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p2 [(ErlangAtom "call_state_tree")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p2 [(ErlangAtom "bytearray")] =
  (ErlangInt (DBI.fromInt 2))
erlps__type2enc__1__p2 [arg_0] = (EXC.function_clause unit)
erlps__type2enc__1__p2 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type2pfx__1 :: ErlangFun
erlps__type2pfx__1 [(ErlangAtom "key_block_hash")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 107))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 104))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1 [(ErlangAtom "micro_block_hash")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 109))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 104))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1 [(ErlangAtom "block_pof_hash")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 102))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1 [(ErlangAtom "block_tx_hash")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 120))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1 [(ErlangAtom "block_state_hash")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 115))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1 args = (erlps__type2pfx__1__p1 args)

erlps__type2pfx__1__p1 :: ErlangFun
erlps__type2pfx__1__p1 [(ErlangAtom "channel")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 104))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p1 [(ErlangAtom "contract_pubkey")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 116))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p1 [(ErlangAtom "contract_bytearray")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p1 [(ErlangAtom "contract_store_key")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 107))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p1 [(ErlangAtom "contract_store_value")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 118))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p1 args = (erlps__type2pfx__1__p2 args)

erlps__type2pfx__1__p2 :: ErlangFun
erlps__type2pfx__1__p2 [(ErlangAtom "transaction")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 116))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 120))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p2 [(ErlangAtom "tx_hash")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 116))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 104))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p2 [(ErlangAtom "oracle_pubkey")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 111))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 107))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p2 [(ErlangAtom "oracle_query")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 111))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 118))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p2 [(ErlangAtom "oracle_query_id")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 111))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 113))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p2 args = (erlps__type2pfx__1__p3 args)

erlps__type2pfx__1__p3 :: ErlangFun
erlps__type2pfx__1__p3 [(ErlangAtom "oracle_response")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 111))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 114))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p3 [(ErlangAtom "account_pubkey")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 97))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 107))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p3 [(ErlangAtom "signature")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 115))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 103))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p3 [(ErlangAtom "commitment")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 109))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p3 [(ErlangAtom "peer_pubkey")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 112))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 112))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p3 args = (erlps__type2pfx__1__p4 args)

erlps__type2pfx__1__p4 :: ErlangFun
erlps__type2pfx__1__p4 [(ErlangAtom "name")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 110))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 109))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p4 [(ErlangAtom "state")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 115))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 116))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p4 [(ErlangAtom "poi")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 112))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 105))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p4 [(ErlangAtom "state_trees")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 115))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 115))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p4 [(ErlangAtom "call_state_tree")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 99))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 115))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p4 args = (erlps__type2pfx__1__p5 args)

erlps__type2pfx__1__p5 :: ErlangFun
erlps__type2pfx__1__p5 [(ErlangAtom "bytearray")] =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int (ErlangInt (DBI.fromInt 98))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.from_int (ErlangInt (DBI.fromInt 97))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
erlps__type2pfx__1__p5 [arg_2] = (EXC.function_clause unit)
erlps__type2pfx__1__p5 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pfx2type__1 :: ErlangFun
erlps__pfx2type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 107)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 104)))
  , (BIN.empty bin_5) =
  (ErlangAtom "key_block_hash")
erlps__pfx2type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 109)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 104)))
  , (BIN.empty bin_5) =
  (ErlangAtom "micro_block_hash")
erlps__pfx2type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 102)))
  , (BIN.empty bin_5) =
  (ErlangAtom "block_pof_hash")
erlps__pfx2type__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 120)))
  , (BIN.empty bin_5) =
  (ErlangAtom "block_tx_hash")
erlps__pfx2type__1 args = (erlps__pfx2type__1__p1 args)

erlps__pfx2type__1__p1 :: ErlangFun
erlps__pfx2type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 115)))
  , (BIN.empty bin_5) =
  (ErlangAtom "block_state_hash")
erlps__pfx2type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 104)))
  , (BIN.empty bin_5) =
  (ErlangAtom "channel")
erlps__pfx2type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 98)))
  , (BIN.empty bin_5) =
  (ErlangAtom "contract_bytearray")
erlps__pfx2type__1__p1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 107)))
  , (BIN.empty bin_5) =
  (ErlangAtom "contract_store_key")
erlps__pfx2type__1__p1 args = (erlps__pfx2type__1__p2 args)

erlps__pfx2type__1__p2 :: ErlangFun
erlps__pfx2type__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 118)))
  , (BIN.empty bin_5) =
  (ErlangAtom "contract_store_value")
erlps__pfx2type__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 116)))
  , (BIN.empty bin_5) =
  (ErlangAtom "contract_pubkey")
erlps__pfx2type__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 120)))
  , (BIN.empty bin_5) =
  (ErlangAtom "transaction")
erlps__pfx2type__1__p2 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 104)))
  , (BIN.empty bin_5) =
  (ErlangAtom "tx_hash")
erlps__pfx2type__1__p2 args = (erlps__pfx2type__1__p3 args)

erlps__pfx2type__1__p3 :: ErlangFun
erlps__pfx2type__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 107)))
  , (BIN.empty bin_5) =
  (ErlangAtom "oracle_pubkey")
erlps__pfx2type__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 118)))
  , (BIN.empty bin_5) =
  (ErlangAtom "oracle_query")
erlps__pfx2type__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 113)))
  , (BIN.empty bin_5) =
  (ErlangAtom "oracle_query_id")
erlps__pfx2type__1__p3 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 114)))
  , (BIN.empty bin_5) =
  (ErlangAtom "oracle_response")
erlps__pfx2type__1__p3 args = (erlps__pfx2type__1__p4 args)

erlps__pfx2type__1__p4 :: ErlangFun
erlps__pfx2type__1__p4 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 97)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 107)))
  , (BIN.empty bin_5) =
  (ErlangAtom "account_pubkey")
erlps__pfx2type__1__p4 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 115)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 103)))
  , (BIN.empty bin_5) =
  (ErlangAtom "signature")
erlps__pfx2type__1__p4 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 109)))
  , (BIN.empty bin_5) =
  (ErlangAtom "commitment")
erlps__pfx2type__1__p4 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 112)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 112)))
  , (BIN.empty bin_5) =
  (ErlangAtom "peer_pubkey")
erlps__pfx2type__1__p4 args = (erlps__pfx2type__1__p5 args)

erlps__pfx2type__1__p5 :: ErlangFun
erlps__pfx2type__1__p5 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 110)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 109)))
  , (BIN.empty bin_5) =
  (ErlangAtom "name")
erlps__pfx2type__1__p5 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 115)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 116)))
  , (BIN.empty bin_5) =
  (ErlangAtom "state")
erlps__pfx2type__1__p5 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 112)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 105)))
  , (BIN.empty bin_5) =
  (ErlangAtom "poi")
erlps__pfx2type__1__p5 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 115)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 115)))
  , (BIN.empty bin_5) =
  (ErlangAtom "state_trees")
erlps__pfx2type__1__p5 args = (erlps__pfx2type__1__p6 args)

erlps__pfx2type__1__p6 :: ErlangFun
erlps__pfx2type__1__p6 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 115)))
  , (BIN.empty bin_5) =
  (ErlangAtom "call_state_tree")
erlps__pfx2type__1__p6 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 98)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 97)))
  , (BIN.empty bin_5) =
  (ErlangAtom "bytearray")
erlps__pfx2type__1__p6 [arg_7] = (EXC.function_clause unit)
erlps__pfx2type__1__p6 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__byte_size_for_type__1 :: ErlangFun
erlps__byte_size_for_type__1 [(ErlangAtom "key_block_hash")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "micro_block_hash")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "block_pof_hash")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "block_tx_hash")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "block_state_hash")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "channel")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "contract_pubkey")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "contract_bytearray")]
  =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "contract_store_key")]
  =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "contract_store_value")]
  =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "transaction")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "tx_hash")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "oracle_pubkey")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "oracle_query")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "oracle_query_id")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "oracle_response")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "account_pubkey")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "signature")] =
  (ErlangInt (DBI.fromInt 64))
erlps__byte_size_for_type__1 [(ErlangAtom "name")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "commitment")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "peer_pubkey")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "state")] =
  (ErlangInt (DBI.fromInt 32))
erlps__byte_size_for_type__1 [(ErlangAtom "poi")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "state_trees")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "call_state_tree")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [(ErlangAtom "bytearray")] =
  (ErlangAtom "not_applicable")
erlps__byte_size_for_type__1 [arg_0] = (EXC.function_clause unit)
erlps__byte_size_for_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__binary_to_base58__1 :: ErlangFun
erlps__binary_to_base58__1 [bin_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Base58" "erlps__binary_to_base58__1"
         [bin_0])
  in (BIF.erlang__iolist_to_binary__1 [arg_1])
erlps__binary_to_base58__1 [arg_3] = (EXC.function_clause unit)
erlps__binary_to_base58__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__base58_to_binary__1 :: ErlangFun
erlps__base58_to_binary__1 [bin_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let arg_1 = (BIF.erlang__binary_to_list__1 [bin_0])
  in
    (BIF.do_remote_fun_call "Base58" "erlps__base58_to_binary__1"
       [arg_1])
erlps__base58_to_binary__1 [arg_4] = (EXC.function_clause unit)
erlps__base58_to_binary__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__binary_to_base64__1 :: ErlangFun
erlps__binary_to_base64__1 [bin_0] =
  (BIF.do_remote_fun_call "Base64" "erlps__encode__1" [bin_0])
erlps__binary_to_base64__1 [arg_2] = (EXC.function_clause unit)
erlps__binary_to_base64__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__base64_to_binary__1 :: ErlangFun
erlps__base64_to_binary__1 [bin_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  (BIF.do_remote_fun_call "Base64" "erlps__decode__1" [bin_0])
erlps__base64_to_binary__1 [arg_3] = (EXC.function_clause unit)
erlps__base64_to_binary__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)