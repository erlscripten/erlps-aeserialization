module Aeser.Api.Encoder.Tests(erlps__test__0,
                               erlps__encode_decode_test___0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__encode_decode_test___0 :: ErlangFun
erlps__encode_decode_test___0 [] =
  let    tup_el_1 = toErl "Byte sizes are correct"
  in let
    tup_el_2 =
      ErlangFun 0
        (let
           lambda_3 [] =
             let   
               arg_4 =
                 ErlangFun 1
                   (let
                      lambda_5 [(ErlangTuple [type_7, bytesize_8])] =
                        let   
                          tup_el_12 =
                            BIF.do_remote_fun_call "Aeser.Api.Encoder"
                              "erlps__byte_size_for_type__1" [type_7]
                        in let
                          match_final_9_14 =
                            ErlangTuple [type_7, bytesize_8, tup_el_12]
                        in
                          case match_final_9_14 of
                            (ErlangTuple [_type_15, _,
                                          bytesize_16]) | (bytesize_16 ==
                                                             bytesize_8) ->
                              match_final_9_14
                            _ -> EXC.badmatch match_final_9_14
                      lambda_5 [arg_6] = EXC.function_clause unit
                      lambda_5 args = EXC.badarity (ErlangFun 1 lambda_5) args
                    in lambda_5)
             in let tup_el_21 = toErl 32
             in let
               head_19 = ErlangTuple [ErlangAtom "key_block_hash", tup_el_21]
             in let tup_el_25 = toErl 32
             in let
               head_23 = ErlangTuple [ErlangAtom "micro_block_hash", tup_el_25]
             in let tup_el_29 = toErl 32
             in let
               head_27 = ErlangTuple [ErlangAtom "block_tx_hash", tup_el_29]
             in let tup_el_33 = toErl 32
             in let
               head_31 = ErlangTuple [ErlangAtom "block_state_hash", tup_el_33]
             in let tup_el_37 = toErl 32
             in let head_35 = ErlangTuple [ErlangAtom "channel", tup_el_37]
             in let tup_el_41 = toErl 32
             in let
               head_39 = ErlangTuple [ErlangAtom "contract_pubkey", tup_el_41]
             in let
               head_43 =
                 ErlangTuple
                   [ErlangAtom "transaction", ErlangAtom "not_applicable"]
             in let tup_el_49 = toErl 32
             in let head_47 = ErlangTuple [ErlangAtom "tx_hash", tup_el_49]
             in let tup_el_53 = toErl 32
             in let
               head_51 = ErlangTuple [ErlangAtom "oracle_pubkey", tup_el_53]
             in let tup_el_57 = toErl 32
             in let
               head_55 = ErlangTuple [ErlangAtom "oracle_query_id", tup_el_57]
             in let tup_el_61 = toErl 32
             in let
               head_59 = ErlangTuple [ErlangAtom "account_pubkey", tup_el_61]
             in let tup_el_65 = toErl 64
             in let head_63 = ErlangTuple [ErlangAtom "signature", tup_el_65]
             in let
               head_67 =
                 ErlangTuple [ErlangAtom "name", ErlangAtom "not_applicable"]
             in let tup_el_73 = toErl 32
             in let head_71 = ErlangTuple [ErlangAtom "commitment", tup_el_73]
             in let tup_el_77 = toErl 32
             in let
               head_75 = ErlangTuple [ErlangAtom "peer_pubkey", tup_el_77]
             in let tup_el_81 = toErl 32
             in let head_79 = ErlangTuple [ErlangAtom "state", tup_el_81]
             in let
               head_83 =
                 ErlangTuple [ErlangAtom "poi", ErlangAtom "not_applicable"]
             in
               BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                 [arg_4,
                  ErlangCons head_19
                    (ErlangCons head_23
                       (ErlangCons head_27
                          (ErlangCons head_31
                             (ErlangCons head_35
                                (ErlangCons head_39
                                   (ErlangCons head_43
                                      (ErlangCons head_47
                                         (ErlangCons head_51
                                            (ErlangCons head_55
                                               (ErlangCons head_59
                                                  (ErlangCons head_63
                                                     (ErlangCons head_67
                                                        (ErlangCons head_71
                                                           (ErlangCons head_75
                                                              (ErlangCons
                                                                 head_79
                                                                 (ErlangCons
                                                                    head_83
                                                                    ErlangEmptyList))))))))))))))))]
           lambda_3 [] = EXC.function_clause unit
           lambda_3 args = EXC.badarity (ErlangFun 0 lambda_3) args
         in lambda_3)
  in let head_0 = ErlangTuple [tup_el_1, tup_el_2]
  in let tup_el_89 = toErl "Serialize/deserialize known types"
  in let
    tup_el_90 =
      ErlangFun 0
        (let
           lambda_91 [] =
             let   
               arg_92 =
                 ErlangFun 1
                   (let
                      lambda_93 [(ErlangTuple [type_95, size0_96])] =
                        let   
                          bytesize_98 =
                            case size0_96 of
                              (ErlangAtom "not_applicable") -> toErl 42
                              _ | isEInt size0_96 -> size0_96
                              something_else -> EXC.case_clause something_else
                        in let bin_el_99 = toErl 42
                        in let
                          key_100 =
                            ErlangBinary
                              (BIN.fromInt bin_el_99 bytesize_98 8 BIN.Big)
                        in let
                          encodedkey_103 =
                            BIF.do_remote_fun_call "Aeser.Api.Encoder"
                              "erlps__encode__2" [type_95, key_100]
                        in let
                          matchExpr_107 =
                            BIF.do_remote_fun_call "Aeser.Api.Encoder"
                              "erlps__decode__1" [encodedkey_103]
                        in
                          case matchExpr_107 of
                            (ErlangTuple [type_105, key_106]) | (type_105 ==
                                                                   type_95)
                                                              , (key_106 ==
                                                                   key_100) ->
                              let
                                match_final_108_111 =
                                  BIF.do_remote_fun_call "Aeser.Api.Encoder"
                                    "erlps__safe_decode__2"
                                    [type_95, encodedkey_103]
                              in
                                case match_final_108_111 of
                                  (ErlangTuple [(ErlangAtom "ok"),
                                                key_112]) | (key_112 ==
                                                               key_100) ->
                                    match_final_108_111
                                  _ -> EXC.badmatch match_final_108_111
                            _ -> EXC.badmatch matchExpr_107
                      lambda_93 [arg_94] = EXC.function_clause unit
                      lambda_93 args = EXC.badarity (ErlangFun 1 lambda_93) args
                    in lambda_93)
             in let tup_el_117 = toErl 32
             in let
               head_115 = ErlangTuple [ErlangAtom "key_block_hash", tup_el_117]
             in let tup_el_121 = toErl 32
             in let
               head_119 =
                 ErlangTuple [ErlangAtom "micro_block_hash", tup_el_121]
             in let tup_el_125 = toErl 32
             in let
               head_123 = ErlangTuple [ErlangAtom "block_tx_hash", tup_el_125]
             in let tup_el_129 = toErl 32
             in let
               head_127 =
                 ErlangTuple [ErlangAtom "block_state_hash", tup_el_129]
             in let tup_el_133 = toErl 32
             in let head_131 = ErlangTuple [ErlangAtom "channel", tup_el_133]
             in let tup_el_137 = toErl 32
             in let
               head_135 = ErlangTuple [ErlangAtom "contract_pubkey", tup_el_137]
             in let
               head_139 =
                 ErlangTuple
                   [ErlangAtom "transaction", ErlangAtom "not_applicable"]
             in let tup_el_145 = toErl 32
             in let head_143 = ErlangTuple [ErlangAtom "tx_hash", tup_el_145]
             in let tup_el_149 = toErl 32
             in let
               head_147 = ErlangTuple [ErlangAtom "oracle_pubkey", tup_el_149]
             in let tup_el_153 = toErl 32
             in let
               head_151 = ErlangTuple [ErlangAtom "oracle_query_id", tup_el_153]
             in let tup_el_157 = toErl 32
             in let
               head_155 = ErlangTuple [ErlangAtom "account_pubkey", tup_el_157]
             in let tup_el_161 = toErl 64
             in let
               head_159 = ErlangTuple [ErlangAtom "signature", tup_el_161]
             in let
               head_163 =
                 ErlangTuple [ErlangAtom "name", ErlangAtom "not_applicable"]
             in let tup_el_169 = toErl 32
             in let
               head_167 = ErlangTuple [ErlangAtom "commitment", tup_el_169]
             in let tup_el_173 = toErl 32
             in let
               head_171 = ErlangTuple [ErlangAtom "peer_pubkey", tup_el_173]
             in let tup_el_177 = toErl 32
             in let head_175 = ErlangTuple [ErlangAtom "state", tup_el_177]
             in let
               head_179 =
                 ErlangTuple [ErlangAtom "poi", ErlangAtom "not_applicable"]
             in
               BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                 [arg_92,
                  ErlangCons head_115
                    (ErlangCons head_119
                       (ErlangCons head_123
                          (ErlangCons head_127
                             (ErlangCons head_131
                                (ErlangCons head_135
                                   (ErlangCons head_139
                                      (ErlangCons head_143
                                         (ErlangCons head_147
                                            (ErlangCons head_151
                                               (ErlangCons head_155
                                                  (ErlangCons head_159
                                                     (ErlangCons head_163
                                                        (ErlangCons head_167
                                                           (ErlangCons head_171
                                                              (ErlangCons
                                                                 head_175
                                                                 (ErlangCons
                                                                    head_179
                                                                    ErlangEmptyList))))))))))))))))]
           lambda_91 [] = EXC.function_clause unit
           lambda_91 args = EXC.badarity (ErlangFun 0 lambda_91) args
         in lambda_91)
  in let head_88 = ErlangTuple [tup_el_89, tup_el_90]
  in let tup_el_185 = toErl "Key size check works"
  in let
    tup_el_186 =
      ErlangFun 0
        (let
           lambda_187 [] =
             let   
               arg_188 =
                 ErlangFun 1
                   (let
                      lambda_189 [(ErlangTuple [_type_191,
                                                (ErlangAtom "not_applicable")])]
                        =
                        ErlangAtom "ok"
                      lambda_189 [(ErlangTuple [type_192, bytesize_193])] =
                        let   
                          checkilligalsize_207 =
                            ErlangFun 1
                              (let
                                 lambda_194 [s_196] =
                                   let    bin_el_197 = toErl 42
                                   in let
                                     key_198 =
                                       ErlangBinary
                                         (BIN.fromInt bin_el_197 s_196 8
                                            BIN.Big)
                                   in let
                                     encodedkey_201 =
                                       BIF.do_remote_fun_call
                                         "Aeser.Api.Encoder" "erlps__encode__2"
                                         [type_192, key_198]
                                   in let
                                     match_final_202_205 =
                                       BIF.do_remote_fun_call
                                         "Aeser.Api.Encoder"
                                         "erlps__safe_decode__2"
                                         [type_192, encodedkey_201]
                                   in
                                     case match_final_202_205 of
                                       (ErlangTuple [(ErlangAtom "error"),
                                                     (ErlangAtom "invalid_encoding")]) ->
                                         match_final_202_205
                                       _ -> EXC.badmatch match_final_202_205
                                 lambda_194 [arg_195] = EXC.function_clause unit
                                 lambda_194 args =
                                   EXC.badarity (ErlangFun 1 lambda_194) args
                               in lambda_194)
                        in let arg_208 = toErl 0
                        in let
                          _ =
                            BIF.erlang__apply__2
                              [checkilligalsize_207,
                               ErlangCons arg_208 ErlangEmptyList]
                        in let rop_212 = toErl 1
                        in let
                          arg_210 = BIF.erlang__op_minus [bytesize_193, rop_212]
                        in let
                          _ =
                            BIF.erlang__apply__2
                              [checkilligalsize_207,
                               ErlangCons arg_210 ErlangEmptyList]
                        in let rop_216 = toErl 1
                        in let
                          arg_214 = BIF.erlang__op_plus [bytesize_193, rop_216]
                        in
                          BIF.erlang__apply__2
                            [checkilligalsize_207,
                             ErlangCons arg_214 ErlangEmptyList]
                      lambda_189 [arg_190] = EXC.function_clause unit
                      lambda_189 args =
                        EXC.badarity (ErlangFun 1 lambda_189) args
                    in lambda_189)
             in let tup_el_221 = toErl 32
             in let
               head_219 = ErlangTuple [ErlangAtom "key_block_hash", tup_el_221]
             in let tup_el_225 = toErl 32
             in let
               head_223 =
                 ErlangTuple [ErlangAtom "micro_block_hash", tup_el_225]
             in let tup_el_229 = toErl 32
             in let
               head_227 = ErlangTuple [ErlangAtom "block_tx_hash", tup_el_229]
             in let tup_el_233 = toErl 32
             in let
               head_231 =
                 ErlangTuple [ErlangAtom "block_state_hash", tup_el_233]
             in let tup_el_237 = toErl 32
             in let head_235 = ErlangTuple [ErlangAtom "channel", tup_el_237]
             in let tup_el_241 = toErl 32
             in let
               head_239 = ErlangTuple [ErlangAtom "contract_pubkey", tup_el_241]
             in let
               head_243 =
                 ErlangTuple
                   [ErlangAtom "transaction", ErlangAtom "not_applicable"]
             in let tup_el_249 = toErl 32
             in let head_247 = ErlangTuple [ErlangAtom "tx_hash", tup_el_249]
             in let tup_el_253 = toErl 32
             in let
               head_251 = ErlangTuple [ErlangAtom "oracle_pubkey", tup_el_253]
             in let tup_el_257 = toErl 32
             in let
               head_255 = ErlangTuple [ErlangAtom "oracle_query_id", tup_el_257]
             in let tup_el_261 = toErl 32
             in let
               head_259 = ErlangTuple [ErlangAtom "account_pubkey", tup_el_261]
             in let tup_el_265 = toErl 64
             in let
               head_263 = ErlangTuple [ErlangAtom "signature", tup_el_265]
             in let
               head_267 =
                 ErlangTuple [ErlangAtom "name", ErlangAtom "not_applicable"]
             in let tup_el_273 = toErl 32
             in let
               head_271 = ErlangTuple [ErlangAtom "commitment", tup_el_273]
             in let tup_el_277 = toErl 32
             in let
               head_275 = ErlangTuple [ErlangAtom "peer_pubkey", tup_el_277]
             in let tup_el_281 = toErl 32
             in let head_279 = ErlangTuple [ErlangAtom "state", tup_el_281]
             in let
               head_283 =
                 ErlangTuple [ErlangAtom "poi", ErlangAtom "not_applicable"]
             in
               BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                 [arg_188,
                  ErlangCons head_219
                    (ErlangCons head_223
                       (ErlangCons head_227
                          (ErlangCons head_231
                             (ErlangCons head_235
                                (ErlangCons head_239
                                   (ErlangCons head_243
                                      (ErlangCons head_247
                                         (ErlangCons head_251
                                            (ErlangCons head_255
                                               (ErlangCons head_259
                                                  (ErlangCons head_263
                                                     (ErlangCons head_267
                                                        (ErlangCons head_271
                                                           (ErlangCons head_275
                                                              (ErlangCons
                                                                 head_279
                                                                 (ErlangCons
                                                                    head_283
                                                                    ErlangEmptyList))))))))))))))))]
           lambda_187 [] = EXC.function_clause unit
           lambda_187 args = EXC.badarity (ErlangFun 0 lambda_187) args
         in lambda_187)
  in let head_184 = ErlangTuple [tup_el_185, tup_el_186]
  in let tup_el_289 = toErl "Missing prefix"
  in let
    tup_el_290 =
      ErlangFun 0
        (let
           lambda_291 [] =
             let   
               arg_292 =
                 ErlangFun 1
                   (let
                      lambda_293 [(ErlangTuple [type_295, size0_296])] =
                        let   
                          bytesize_298 =
                            case size0_296 of
                              (ErlangAtom "not_applicable") -> toErl 42
                              _ | isEInt size0_296 -> size0_296
                              something_else -> EXC.case_clause something_else
                        in let bin_el_299 = toErl 42
                        in let
                          key_300 =
                            ErlangBinary
                              (BIN.fromInt bin_el_299 bytesize_298 8 BIN.Big)
                        in let
                          encodedkey_303 =
                            BIF.do_remote_fun_call "Aeser.Api.Encoder"
                              "erlps__encode__2" [type_295, key_300]
                        in
                          case encodedkey_303 of
                            (ErlangBinary binSeg_304) | (ErlangInt size_305) <-
                                                          (toErl 1)
                                                      , (BIN.Ok _partofprefix_307 bin_306) <-
                                                          (BIN.chopInt
                                                             binSeg_304 size_305
                                                             8 BIN.Big
                                                             BIN.Unsigned)
                                                      , (ErlangInt size_308) <-
                                                          (BIN.size bin_306)
                                                      , (BIN.Ok restofkey_310 bin_309) <-
                                                          (BIN.chopBin bin_306
                                                             size_308 8)
                                                      , BIN.empty bin_309 ->
                              let
                                matchExpr_314 =
                                  BIF.do_remote_fun_call "Aeser.Api.Encoder"
                                    "erlps__safe_decode__2"
                                    [type_295, restofkey_310]
                              in
                                case matchExpr_314 of
                                  (ErlangTuple [(ErlangAtom "error"),
                                                (ErlangAtom "invalid_encoding")]) ->
                                    case encodedkey_303 of
                                      (ErlangBinary binSeg_315) | (ErlangInt size_316) <-
                                                                    (toErl 2)
                                                                , (BIN.Ok _prefixwithoutdelimiter_318 bin_317) <-
                                                                    (BIN.chopInt
                                                                       binSeg_315
                                                                       size_316
                                                                       8 BIN.Big
                                                                       BIN.Unsigned)
                                                                , (ErlangInt size_319) <-
                                                                    (BIN.size
                                                                       bin_317)
                                                                , (BIN.Ok restofkey1_321 bin_320) <-
                                                                    (BIN.chopBin
                                                                       bin_317
                                                                       size_319
                                                                       8)
                                                                , BIN.empty
                                                                    bin_320 ->
                                        let
                                          matchExpr_325 =
                                            BIF.do_remote_fun_call
                                              "Aeser.Api.Encoder"
                                              "erlps__safe_decode__2"
                                              [type_295, restofkey1_321]
                                        in
                                          case matchExpr_325 of
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          (ErlangAtom "invalid_encoding")]) ->
                                              case encodedkey_303 of
                                                (ErlangBinary binSeg_326) | (ErlangInt size_327) <-
                                                                              (toErl
                                                                                 3)
                                                                          , (BIN.Ok _wholeprefix_329 bin_328) <-
                                                                              (BIN.chopInt
                                                                                 binSeg_326
                                                                                 size_327
                                                                                 8
                                                                                 BIN.Big
                                                                                 BIN.Unsigned)
                                                                          , (ErlangInt size_330) <-
                                                                              (BIN.size
                                                                                 bin_328)
                                                                          , (BIN.Ok restofkey2_332 bin_331) <-
                                                                              (BIN.chopBin
                                                                                 bin_328
                                                                                 size_330
                                                                                 8)
                                                                          , BIN.empty
                                                                              bin_331 ->
                                                  let
                                                    match_final_334_337 =
                                                      BIF.do_remote_fun_call
                                                        "Aeser.Api.Encoder"
                                                        "erlps__safe_decode__2"
                                                        [type_295,
                                                         restofkey2_332]
                                                  in
                                                    case match_final_334_337 of
                                                      (ErlangTuple [(ErlangAtom "error"),
                                                                    (ErlangAtom "invalid_encoding")]) ->
                                                        match_final_334_337
                                                      _ ->
                                                        EXC.badmatch
                                                          match_final_334_337
                                                _ -> EXC.badmatch encodedkey_303
                                            _ -> EXC.badmatch matchExpr_325
                                      _ -> EXC.badmatch encodedkey_303
                                  _ -> EXC.badmatch matchExpr_314
                            _ -> EXC.badmatch encodedkey_303
                      lambda_293 [arg_294] = EXC.function_clause unit
                      lambda_293 args =
                        EXC.badarity (ErlangFun 1 lambda_293) args
                    in lambda_293)
             in let tup_el_342 = toErl 32
             in let
               head_340 = ErlangTuple [ErlangAtom "key_block_hash", tup_el_342]
             in let tup_el_346 = toErl 32
             in let
               head_344 =
                 ErlangTuple [ErlangAtom "micro_block_hash", tup_el_346]
             in let tup_el_350 = toErl 32
             in let
               head_348 = ErlangTuple [ErlangAtom "block_tx_hash", tup_el_350]
             in let tup_el_354 = toErl 32
             in let
               head_352 =
                 ErlangTuple [ErlangAtom "block_state_hash", tup_el_354]
             in let tup_el_358 = toErl 32
             in let head_356 = ErlangTuple [ErlangAtom "channel", tup_el_358]
             in let tup_el_362 = toErl 32
             in let
               head_360 = ErlangTuple [ErlangAtom "contract_pubkey", tup_el_362]
             in let
               head_364 =
                 ErlangTuple
                   [ErlangAtom "transaction", ErlangAtom "not_applicable"]
             in let tup_el_370 = toErl 32
             in let head_368 = ErlangTuple [ErlangAtom "tx_hash", tup_el_370]
             in let tup_el_374 = toErl 32
             in let
               head_372 = ErlangTuple [ErlangAtom "oracle_pubkey", tup_el_374]
             in let tup_el_378 = toErl 32
             in let
               head_376 = ErlangTuple [ErlangAtom "oracle_query_id", tup_el_378]
             in let tup_el_382 = toErl 32
             in let
               head_380 = ErlangTuple [ErlangAtom "account_pubkey", tup_el_382]
             in let tup_el_386 = toErl 64
             in let
               head_384 = ErlangTuple [ErlangAtom "signature", tup_el_386]
             in let
               head_388 =
                 ErlangTuple [ErlangAtom "name", ErlangAtom "not_applicable"]
             in let tup_el_394 = toErl 32
             in let
               head_392 = ErlangTuple [ErlangAtom "commitment", tup_el_394]
             in let tup_el_398 = toErl 32
             in let
               head_396 = ErlangTuple [ErlangAtom "peer_pubkey", tup_el_398]
             in let tup_el_402 = toErl 32
             in let head_400 = ErlangTuple [ErlangAtom "state", tup_el_402]
             in let
               head_404 =
                 ErlangTuple [ErlangAtom "poi", ErlangAtom "not_applicable"]
             in
               BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                 [arg_292,
                  ErlangCons head_340
                    (ErlangCons head_344
                       (ErlangCons head_348
                          (ErlangCons head_352
                             (ErlangCons head_356
                                (ErlangCons head_360
                                   (ErlangCons head_364
                                      (ErlangCons head_368
                                         (ErlangCons head_372
                                            (ErlangCons head_376
                                               (ErlangCons head_380
                                                  (ErlangCons head_384
                                                     (ErlangCons head_388
                                                        (ErlangCons head_392
                                                           (ErlangCons head_396
                                                              (ErlangCons
                                                                 head_400
                                                                 (ErlangCons
                                                                    head_404
                                                                    ErlangEmptyList))))))))))))))))]
           lambda_291 [] = EXC.function_clause unit
           lambda_291 args = EXC.badarity (ErlangFun 0 lambda_291) args
         in lambda_291)
  in let head_288 = ErlangTuple [tup_el_289, tup_el_290]
  in let tup_el_410 = toErl "Piece of encoded key"
  in let
    tup_el_411 =
      ErlangFun 0
        (let
           lambda_412 [] =
             let   
               arg_413 =
                 ErlangFun 1
                   (let
                      lambda_414 [(ErlangTuple [type_416, size0_417])] =
                        let   
                          bytesize_419 =
                            case size0_417 of
                              (ErlangAtom "not_applicable") -> toErl 42
                              _ | isEInt size0_417 -> size0_417
                              something_else -> EXC.case_clause something_else
                        in let bin_el_420 = toErl 42
                        in let
                          key_421 =
                            ErlangBinary
                              (BIN.fromInt bin_el_420 bytesize_419 8 BIN.Big)
                        in let
                          encodedkey_424 =
                            BIF.do_remote_fun_call "Aeser.Api.Encoder"
                              "erlps__encode__2" [type_416, key_421]
                        in let
                          lop_425 = BIF.erlang__byte_size__1 [encodedkey_424]
                        in let rop_427 = toErl 2
                        in let
                          halfkeysize_428 =
                            BIF.erlang__op_div_strict [lop_425, rop_427]
                        in
                          case encodedkey_424 of
                            (ErlangBinary binSeg_429) | (ErlangInt size_430) <-
                                                          (halfkeysize_428)
                                                      , (BIN.Ok halfkey_432 bin_431) <-
                                                          (BIN.chopInt
                                                             binSeg_429 size_430
                                                             8 BIN.Big
                                                             BIN.Unsigned)
                                                      , (ErlangInt size_433) <-
                                                          (BIN.size bin_431)
                                                      , (BIN.Ok restofkey_435 bin_434) <-
                                                          (BIN.chopBin bin_431
                                                             size_433 8)
                                                      , BIN.empty bin_434 ->
                              let
                                matchExpr_439 =
                                  BIF.do_remote_fun_call "Aeser.Api.Encoder"
                                    "erlps__safe_decode__2"
                                    [type_416, halfkey_432]
                              in
                                case matchExpr_439 of
                                  (ErlangTuple [(ErlangAtom "error"),
                                                (ErlangAtom "invalid_encoding")]) ->
                                    let
                                      match_final_440_443 =
                                        BIF.do_remote_fun_call
                                          "Aeser.Api.Encoder"
                                          "erlps__safe_decode__2"
                                          [type_416, restofkey_435]
                                    in
                                      case match_final_440_443 of
                                        (ErlangTuple [(ErlangAtom "error"),
                                                      (ErlangAtom "invalid_encoding")]) ->
                                          match_final_440_443
                                        _ -> EXC.badmatch match_final_440_443
                                  _ -> EXC.badmatch matchExpr_439
                            _ -> EXC.badmatch encodedkey_424
                      lambda_414 [arg_415] = EXC.function_clause unit
                      lambda_414 args =
                        EXC.badarity (ErlangFun 1 lambda_414) args
                    in lambda_414)
             in let tup_el_448 = toErl 32
             in let
               head_446 = ErlangTuple [ErlangAtom "key_block_hash", tup_el_448]
             in let tup_el_452 = toErl 32
             in let
               head_450 =
                 ErlangTuple [ErlangAtom "micro_block_hash", tup_el_452]
             in let tup_el_456 = toErl 32
             in let
               head_454 = ErlangTuple [ErlangAtom "block_tx_hash", tup_el_456]
             in let tup_el_460 = toErl 32
             in let
               head_458 =
                 ErlangTuple [ErlangAtom "block_state_hash", tup_el_460]
             in let tup_el_464 = toErl 32
             in let head_462 = ErlangTuple [ErlangAtom "channel", tup_el_464]
             in let tup_el_468 = toErl 32
             in let
               head_466 = ErlangTuple [ErlangAtom "contract_pubkey", tup_el_468]
             in let
               head_470 =
                 ErlangTuple
                   [ErlangAtom "transaction", ErlangAtom "not_applicable"]
             in let tup_el_476 = toErl 32
             in let head_474 = ErlangTuple [ErlangAtom "tx_hash", tup_el_476]
             in let tup_el_480 = toErl 32
             in let
               head_478 = ErlangTuple [ErlangAtom "oracle_pubkey", tup_el_480]
             in let tup_el_484 = toErl 32
             in let
               head_482 = ErlangTuple [ErlangAtom "oracle_query_id", tup_el_484]
             in let tup_el_488 = toErl 32
             in let
               head_486 = ErlangTuple [ErlangAtom "account_pubkey", tup_el_488]
             in let tup_el_492 = toErl 64
             in let
               head_490 = ErlangTuple [ErlangAtom "signature", tup_el_492]
             in let
               head_494 =
                 ErlangTuple [ErlangAtom "name", ErlangAtom "not_applicable"]
             in let tup_el_500 = toErl 32
             in let
               head_498 = ErlangTuple [ErlangAtom "commitment", tup_el_500]
             in let tup_el_504 = toErl 32
             in let
               head_502 = ErlangTuple [ErlangAtom "peer_pubkey", tup_el_504]
             in let tup_el_508 = toErl 32
             in let head_506 = ErlangTuple [ErlangAtom "state", tup_el_508]
             in let
               head_510 =
                 ErlangTuple [ErlangAtom "poi", ErlangAtom "not_applicable"]
             in
               BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                 [arg_413,
                  ErlangCons head_446
                    (ErlangCons head_450
                       (ErlangCons head_454
                          (ErlangCons head_458
                             (ErlangCons head_462
                                (ErlangCons head_466
                                   (ErlangCons head_470
                                      (ErlangCons head_474
                                         (ErlangCons head_478
                                            (ErlangCons head_482
                                               (ErlangCons head_486
                                                  (ErlangCons head_490
                                                     (ErlangCons head_494
                                                        (ErlangCons head_498
                                                           (ErlangCons head_502
                                                              (ErlangCons
                                                                 head_506
                                                                 (ErlangCons
                                                                    head_510
                                                                    ErlangEmptyList))))))))))))))))]
           lambda_412 [] = EXC.function_clause unit
           lambda_412 args = EXC.badarity (ErlangFun 0 lambda_412) args
         in lambda_412)
  in let head_409 = ErlangTuple [tup_el_410, tup_el_411]
  in let tup_el_516 = toErl "Encode/decode binary with only zeros"
  in let
    tup_el_517 =
      ErlangFun 0
        (let
           lambda_518 [] =
             let    arg_520 = toErl 1
             in let arg_521 = toErl 64
             in let
               lcSrc_519 =
                 BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                   [arg_520, arg_521]
             in let
               bins_526 =
                 flmap
                   (\ lc_523 ->
                      let    bin_el_525 = toErl 0
                      in let
                        lcRet_524 =
                          ErlangBinary (BIN.fromInt bin_el_525 lc_523 8 BIN.Big)
                      in ErlangCons lcRet_524 ErlangEmptyList)
                   lcSrc_519
             in let
               arg_527 =
                 ErlangFun 1
                   (let
                      lambda_528 [bin_530] =
                        let   
                          arg_531 =
                            ErlangFun 1
                              (let
                                 lambda_532 [(ErlangTuple [type_534, s_535])] =
                                   let   
                                     rop_539 =
                                       BIF.erlang__byte_size__1 [bin_530]
                                   in let
                                     lop_537 =
                                       BIF.erlang__op_exactEq [s_535, rop_539]
                                   in let
                                     case_536 =
                                       case lop_537 of
                                         (ErlangAtom "true") ->
                                           ErlangAtom "true"
                                         (ErlangAtom "false") ->
                                           BIF.erlang__op_exactEq
                                             [s_535,
                                              ErlangAtom "not_applicable"]
                                         _ -> EXC.badarg1 lop_537
                                   in let
                                     _ =
                                       case case_536 of
                                         (ErlangAtom "true") ->
                                           let   
                                             encoded_545 =
                                               BIF.do_remote_fun_call
                                                 "Aeser.Api.Encoder"
                                                 "erlps__encode__2"
                                                 [type_534, bin_530]
                                           in let
                                             matchExpr_549 =
                                               BIF.do_remote_fun_call
                                                 "Aeser.Api.Encoder"
                                                 "erlps__safe_decode__2"
                                                 [type_534, encoded_545]
                                           in
                                             case matchExpr_549 of
                                               (ErlangTuple [(ErlangAtom "ok"),
                                                             decoded_548]) ->
                                                 let
                                                   fun_550 =
                                                     ErlangFun 0
                                                       (let
                                                          lambda_551 [] =
                                                            case bin_530 of
                                                              __x_554 | (__x_554 ==
                                                                           decoded_548) ->
                                                                ErlangAtom "ok"
                                                              __v_555 ->
                                                                let   
                                                                  head_559 =
                                                                    ErlangTuple
                                                                      [ErlangAtom
                                                                         "module",
                                                                       ErlangAtom
                                                                         "aeser_api_encoder_tests"]
                                                                in let
                                                                  tup_el_565 =
                                                                    toErl 127
                                                                in let
                                                                  head_563 =
                                                                    ErlangTuple
                                                                      [ErlangAtom
                                                                         "line",
                                                                       tup_el_565]
                                                                in let
                                                                  tup_el_569 =
                                                                    toErl "Bin"
                                                                in let
                                                                  head_567 =
                                                                    ErlangTuple
                                                                      [ErlangAtom
                                                                         "expression",
                                                                       tup_el_569]
                                                                in let
                                                                  head_571 =
                                                                    ErlangTuple
                                                                      [ErlangAtom
                                                                         "expected",
                                                                       decoded_548]
                                                                in let
                                                                  head_575 =
                                                                    ErlangTuple
                                                                      [ErlangAtom
                                                                         "value",
                                                                       __v_555]
                                                                in let
                                                                  arg_556 =
                                                                    ErlangTuple
                                                                      [ErlangAtom
                                                                         "assertEqual",
                                                                       ErlangCons
                                                                         head_559
                                                                         (ErlangCons
                                                                            head_563
                                                                            (ErlangCons
                                                                               head_567
                                                                               (ErlangCons
                                                                                  head_571
                                                                                  (ErlangCons
                                                                                     head_575
                                                                                     ErlangEmptyList))))]
                                                                in
                                                                  BIF.erlang__error__1
                                                                    [arg_556]
                                                          lambda_551 [] =
                                                            EXC.function_clause
                                                              unit
                                                          lambda_551 args =
                                                            EXC.badarity
                                                              (ErlangFun 0
                                                                 lambda_551)
                                                              args
                                                        in lambda_551)
                                                 in
                                                   BIF.erlang__apply__2
                                                     [fun_550, ErlangEmptyList]
                                               _ -> EXC.badmatch matchExpr_549
                                         (ErlangAtom "false") -> ErlangAtom "ok"
                                         something_else ->
                                           EXC.case_clause something_else
                                   in let
                                     encoded1_580 =
                                       BIF.do_remote_fun_call "Base58"
                                         "erlps__binary_to_base58__1" [bin_530]
                                   in let
                                     decoded1_582 =
                                       BIF.do_remote_fun_call "Base58"
                                         "erlps__base58_to_binary__1"
                                         [encoded1_580]
                                   in let
                                     fun_583 =
                                       ErlangFun 0
                                         (let
                                            lambda_584 [] =
                                              case decoded1_582 of
                                                __x_587 | (__x_587 ==
                                                             bin_530) ->
                                                  ErlangAtom "ok"
                                                __v_588 ->
                                                  let   
                                                    head_592 =
                                                      ErlangTuple
                                                        [ErlangAtom "module",
                                                         ErlangAtom
                                                           "aeser_api_encoder_tests"]
                                                  in let tup_el_598 = toErl 133
                                                  in let
                                                    head_596 =
                                                      ErlangTuple
                                                        [ErlangAtom "line",
                                                         tup_el_598]
                                                  in let
                                                    tup_el_602 =
                                                      toErl "Decoded1"
                                                  in let
                                                    head_600 =
                                                      ErlangTuple
                                                        [ErlangAtom
                                                           "expression",
                                                         tup_el_602]
                                                  in let
                                                    head_604 =
                                                      ErlangTuple
                                                        [ErlangAtom "expected",
                                                         bin_530]
                                                  in let
                                                    head_608 =
                                                      ErlangTuple
                                                        [ErlangAtom "value",
                                                         __v_588]
                                                  in let
                                                    arg_589 =
                                                      ErlangTuple
                                                        [ErlangAtom
                                                           "assertEqual",
                                                         ErlangCons head_592
                                                           (ErlangCons head_596
                                                              (ErlangCons
                                                                 head_600
                                                                 (ErlangCons
                                                                    head_604
                                                                    (ErlangCons
                                                                       head_608
                                                                       ErlangEmptyList))))]
                                                  in
                                                    BIF.erlang__error__1
                                                      [arg_589]
                                            lambda_584 [] =
                                              EXC.function_clause unit
                                            lambda_584 args =
                                              EXC.badarity
                                                (ErlangFun 0 lambda_584) args
                                          in lambda_584)
                                   in
                                     BIF.erlang__apply__2
                                       [fun_583, ErlangEmptyList]
                                 lambda_532 [arg_533] = EXC.function_clause unit
                                 lambda_532 args =
                                   EXC.badarity (ErlangFun 1 lambda_532) args
                               in lambda_532)
                        in let tup_el_615 = toErl 32
                        in let
                          head_613 =
                            ErlangTuple
                              [ErlangAtom "key_block_hash", tup_el_615]
                        in let tup_el_619 = toErl 32
                        in let
                          head_617 =
                            ErlangTuple
                              [ErlangAtom "micro_block_hash", tup_el_619]
                        in let tup_el_623 = toErl 32
                        in let
                          head_621 =
                            ErlangTuple [ErlangAtom "block_tx_hash", tup_el_623]
                        in let tup_el_627 = toErl 32
                        in let
                          head_625 =
                            ErlangTuple
                              [ErlangAtom "block_state_hash", tup_el_627]
                        in let tup_el_631 = toErl 32
                        in let
                          head_629 =
                            ErlangTuple [ErlangAtom "channel", tup_el_631]
                        in let tup_el_635 = toErl 32
                        in let
                          head_633 =
                            ErlangTuple
                              [ErlangAtom "contract_pubkey", tup_el_635]
                        in let
                          head_637 =
                            ErlangTuple
                              [ErlangAtom "transaction",
                               ErlangAtom "not_applicable"]
                        in let tup_el_643 = toErl 32
                        in let
                          head_641 =
                            ErlangTuple [ErlangAtom "tx_hash", tup_el_643]
                        in let tup_el_647 = toErl 32
                        in let
                          head_645 =
                            ErlangTuple [ErlangAtom "oracle_pubkey", tup_el_647]
                        in let tup_el_651 = toErl 32
                        in let
                          head_649 =
                            ErlangTuple
                              [ErlangAtom "oracle_query_id", tup_el_651]
                        in let tup_el_655 = toErl 32
                        in let
                          head_653 =
                            ErlangTuple
                              [ErlangAtom "account_pubkey", tup_el_655]
                        in let tup_el_659 = toErl 64
                        in let
                          head_657 =
                            ErlangTuple [ErlangAtom "signature", tup_el_659]
                        in let
                          head_661 =
                            ErlangTuple
                              [ErlangAtom "name", ErlangAtom "not_applicable"]
                        in let tup_el_667 = toErl 32
                        in let
                          head_665 =
                            ErlangTuple [ErlangAtom "commitment", tup_el_667]
                        in let tup_el_671 = toErl 32
                        in let
                          head_669 =
                            ErlangTuple [ErlangAtom "peer_pubkey", tup_el_671]
                        in let tup_el_675 = toErl 32
                        in let
                          head_673 =
                            ErlangTuple [ErlangAtom "state", tup_el_675]
                        in let
                          head_677 =
                            ErlangTuple
                              [ErlangAtom "poi", ErlangAtom "not_applicable"]
                        in
                          BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                            [arg_531,
                             ErlangCons head_613
                               (ErlangCons head_617
                                  (ErlangCons head_621
                                     (ErlangCons head_625
                                        (ErlangCons head_629
                                           (ErlangCons head_633
                                              (ErlangCons head_637
                                                 (ErlangCons head_641
                                                    (ErlangCons head_645
                                                       (ErlangCons head_649
                                                          (ErlangCons head_653
                                                             (ErlangCons
                                                                head_657
                                                                (ErlangCons
                                                                   head_661
                                                                   (ErlangCons
                                                                      head_665
                                                                      (ErlangCons
                                                                         head_669
                                                                         (ErlangCons
                                                                            head_673
                                                                            (ErlangCons
                                                                               head_677
                                                                               ErlangEmptyList))))))))))))))))]
                      lambda_528 [arg_529] = EXC.function_clause unit
                      lambda_528 args =
                        EXC.badarity (ErlangFun 1 lambda_528) args
                    in lambda_528)
             in
               BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                 [arg_527, bins_526]
           lambda_518 [] = EXC.function_clause unit
           lambda_518 args = EXC.badarity (ErlangFun 0 lambda_518) args
         in lambda_518)
  in let head_515 = ErlangTuple [tup_el_516, tup_el_517]
  in
    ErlangCons head_0
      (ErlangCons head_88
         (ErlangCons head_184
            (ErlangCons head_288
               (ErlangCons head_409 (ErlangCons head_515 ErlangEmptyList)))))
erlps__encode_decode_test___0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  BIF.do_remote_fun_call "Eunit" "erlps__test__1"
    [ErlangAtom "aeser_api_encoder_tests"]
erlps__test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args