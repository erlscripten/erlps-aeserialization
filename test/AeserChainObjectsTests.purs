module Aeser.Chain.Objects.Tests(erlps__test__0,
                                 erlps__basic_test__0,
                                 erlps__basic_fail_test__0, erlps__list_test__0,
                                 erlps__list_fail_test__0,
                                 erlps__deep_list_test__0,
                                 erlps__deep_list_fail_test__0,
                                 erlps__array_test__0,
                                 erlps__array_fail_test__0,
                                 erlps__deep_array_test__0,
                                 erlps__deep_array_fail_test__0,
                                 erlps__tag_fail_test__0,
                                 erlps__vsn_fail_test__0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__basic_test__0 :: ErlangFun
erlps__basic_test__0 [] =
  let    head_0 = ErlangTuple [ErlangAtom "foo", ErlangAtom "int"]
  in let
    head_4 = ErlangTuple [ErlangAtom "bar", ErlangAtom "binary"]
  in let tup_el_11 = toErl 1
  in let head_9 = ErlangTuple [ErlangAtom "foo", tup_el_11]
  in let bin_el_16 = toErl 2
  in let
    tup_el_15 =
      ErlangBinary (BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big)
  in let head_13 = ErlangTuple [ErlangAtom "bar", tup_el_15]
  in let
    fun_19 =
      ErlangFun 0
        (let
           lambda_20 [] =
             let   
               arg_24 =
                 erlps__serialize__2
                   [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                    ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)]
             in let
               case_22 =
                 erlps__deserialize__2
                   [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                    arg_24]
             in
               case case_22 of
                 __x_27 | (__x_27 ==
                             (ErlangCons head_9
                                (ErlangCons head_13 ErlangEmptyList))) ->
                   ErlangAtom "ok"
                 __v_28 ->
                   let   
                     head_32 =
                       ErlangTuple
                         [ErlangAtom "module",
                          ErlangAtom "aeser_chain_objects_tests"]
                   in let tup_el_38 = toErl 18
                   in let head_36 = ErlangTuple [ErlangAtom "line", tup_el_38]
                   in let
                     tup_el_42 =
                       toErl
                         "deserialize ( Template , serialize ( Template , Values ) )"
                   in let
                     head_40 = ErlangTuple [ErlangAtom "expression", tup_el_42]
                   in let
                     head_44 =
                       ErlangTuple
                         [ErlangAtom "expected",
                          ErlangCons head_9
                            (ErlangCons head_13 ErlangEmptyList)]
                   in let head_48 = ErlangTuple [ErlangAtom "value", __v_28]
                   in let
                     arg_29 =
                       ErlangTuple
                         [ErlangAtom "assertEqual",
                          ErlangCons head_32
                            (ErlangCons head_36
                               (ErlangCons head_40
                                  (ErlangCons head_44
                                     (ErlangCons head_48 ErlangEmptyList))))]
                   in BIF.erlang__error__1 [arg_29]
           lambda_20 [] = EXC.function_clause unit
           lambda_20 args = EXC.badarity (ErlangFun 0 lambda_20) args
         in lambda_20)
  in BIF.erlang__apply__2 [fun_19, ErlangEmptyList]
erlps__basic_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__basic_fail_test__0 :: ErlangFun
erlps__basic_fail_test__0 [] =
  let    head_0 = ErlangTuple [ErlangAtom "foo", ErlangAtom "int"]
  in let
    head_4 = ErlangTuple [ErlangAtom "bar", ErlangAtom "binary"]
  in let tup_el_11 = toErl 1
  in let head_9 = ErlangTuple [ErlangAtom "foo", tup_el_11]
  in let tup_el_15 = toErl 1
  in let head_13 = ErlangTuple [ErlangAtom "bar", tup_el_15]
  in let
    fun_18 =
      ErlangFun 0
        (let
           lambda_19 [] =
             EXC.tryOfCatch
               (\ _ ->
                  erlps__serialize__2
                    [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                     ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)])
               (\ of_22 ->
                  let   
                    head_29 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_35 = toErl 23
                  in let head_33 = ErlangTuple [ErlangAtom "line", tup_el_35]
                  in let tup_el_39 = toErl "serialize ( Template , Values )"
                  in let
                    head_37 = ErlangTuple [ErlangAtom "expression", tup_el_39]
                  in let lop_44 = toErl "{ "
                  in let lop_46 = toErl "error"
                  in let lop_48 = toErl " , "
                  in let lop_50 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                  in let rop_51 = toErl " , [...] }"
                  in let rop_49 = BIF.erlang__op_append [lop_50, rop_51]
                  in let rop_47 = BIF.erlang__op_append [lop_48, rop_49]
                  in let rop_45 = BIF.erlang__op_append [lop_46, rop_47]
                  in let tup_el_43 = BIF.erlang__op_append [lop_44, rop_45]
                  in let head_41 = ErlangTuple [ErlangAtom "pattern", tup_el_43]
                  in let
                    head_53 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_22]
                  in let
                    arg_26 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_29
                           (ErlangCons head_33
                              (ErlangCons head_37
                                 (ErlangCons head_41
                                    (ErlangCons head_53 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_26])
               (\ ex_23 ->
                  case ex_23 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_field"), _,
                                                _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_57, __t_58, __s_59]) ->
                      let   
                        head_63 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_69 = toErl 23
                      in let
                        head_67 = ErlangTuple [ErlangAtom "line", tup_el_69]
                      in let tup_el_73 = toErl "serialize ( Template , Values )"
                      in let
                        head_71 =
                          ErlangTuple [ErlangAtom "expression", tup_el_73]
                      in let lop_78 = toErl "{ "
                      in let lop_80 = toErl "error"
                      in let lop_82 = toErl " , "
                      in let
                        lop_84 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                      in let rop_85 = toErl " , [...] }"
                      in let rop_83 = BIF.erlang__op_append [lop_84, rop_85]
                      in let rop_81 = BIF.erlang__op_append [lop_82, rop_83]
                      in let rop_79 = BIF.erlang__op_append [lop_80, rop_81]
                      in let tup_el_77 = BIF.erlang__op_append [lop_78, rop_79]
                      in let
                        head_75 = ErlangTuple [ErlangAtom "pattern", tup_el_77]
                      in let tup_el_89 = ErlangTuple [__c_57, __t_58, __s_59]
                      in let
                        head_87 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_89]
                      in let
                        arg_60 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_63
                               (ErlangCons head_67
                                  (ErlangCons head_71
                                     (ErlangCons head_75
                                        (ErlangCons head_87 ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_60]
                    ex_24 -> EXC.raise ex_24)
           lambda_19 [] = EXC.function_clause unit
           lambda_19 args = EXC.badarity (ErlangFun 0 lambda_19) args
         in lambda_19)
  in BIF.erlang__apply__2 [fun_18, ErlangEmptyList]
erlps__basic_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__list_test__0 :: ErlangFun
erlps__list_test__0 [] =
  let   
    head_0 =
      ErlangTuple
        [ErlangAtom "foo", ErlangCons (ErlangAtom "int") ErlangEmptyList]
  in let
    head_6 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons (ErlangAtom "binary") ErlangEmptyList]
  in let
    head_12 =
      ErlangTuple
        [ErlangAtom "baz", ErlangCons (ErlangAtom "int") ErlangEmptyList]
  in let head_22 = toErl 1
  in let
    head_19 =
      ErlangTuple
        [ErlangAtom "foo", ErlangCons head_22 ErlangEmptyList]
  in let bin_el_29 = toErl 2
  in let
    head_28 =
      ErlangBinary (BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big)
  in let bin_el_32 = toErl 2
  in let
    head_31 =
      ErlangBinary (BIN.fromInt bin_el_32 (toErl 8) 1 BIN.Big)
  in let
    head_25 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons head_28 (ErlangCons head_31 ErlangEmptyList)]
  in let head_35 = ErlangTuple [ErlangAtom "baz", ErlangEmptyList]
  in let
    fun_40 =
      ErlangFun 0
        (let
           lambda_41 [] =
             let   
               arg_45 =
                 erlps__serialize__2
                   [ErlangCons head_0
                      (ErlangCons head_6 (ErlangCons head_12 ErlangEmptyList)),
                    ErlangCons head_19
                      (ErlangCons head_25 (ErlangCons head_35 ErlangEmptyList))]
             in let
               case_43 =
                 erlps__deserialize__2
                   [ErlangCons head_0
                      (ErlangCons head_6 (ErlangCons head_12 ErlangEmptyList)),
                    arg_45]
             in
               case case_43 of
                 __x_48 | (__x_48 ==
                             (ErlangCons head_19
                                (ErlangCons head_25
                                   (ErlangCons head_35 ErlangEmptyList)))) ->
                   ErlangAtom "ok"
                 __v_49 ->
                   let   
                     head_53 =
                       ErlangTuple
                         [ErlangAtom "module",
                          ErlangAtom "aeser_chain_objects_tests"]
                   in let tup_el_59 = toErl 28
                   in let head_57 = ErlangTuple [ErlangAtom "line", tup_el_59]
                   in let
                     tup_el_63 =
                       toErl
                         "deserialize ( Template , serialize ( Template , Values ) )"
                   in let
                     head_61 = ErlangTuple [ErlangAtom "expression", tup_el_63]
                   in let
                     head_65 =
                       ErlangTuple
                         [ErlangAtom "expected",
                          ErlangCons head_19
                            (ErlangCons head_25
                               (ErlangCons head_35 ErlangEmptyList))]
                   in let head_69 = ErlangTuple [ErlangAtom "value", __v_49]
                   in let
                     arg_50 =
                       ErlangTuple
                         [ErlangAtom "assertEqual",
                          ErlangCons head_53
                            (ErlangCons head_57
                               (ErlangCons head_61
                                  (ErlangCons head_65
                                     (ErlangCons head_69 ErlangEmptyList))))]
                   in BIF.erlang__error__1 [arg_50]
           lambda_41 [] = EXC.function_clause unit
           lambda_41 args = EXC.badarity (ErlangFun 0 lambda_41) args
         in lambda_41)
  in BIF.erlang__apply__2 [fun_40, ErlangEmptyList]
erlps__list_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__list_fail_test__0 :: ErlangFun
erlps__list_fail_test__0 [] =
  let   
    head_0 =
      ErlangTuple
        [ErlangAtom "foo", ErlangCons (ErlangAtom "int") ErlangEmptyList]
  in let
    head_6 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons (ErlangAtom "binary") ErlangEmptyList]
  in let head_16 = toErl 1
  in let
    head_13 =
      ErlangTuple
        [ErlangAtom "foo", ErlangCons head_16 ErlangEmptyList]
  in let head_22 = toErl 2
  in let bin_el_25 = toErl 2
  in let
    head_24 =
      ErlangBinary (BIN.fromInt bin_el_25 (toErl 8) 1 BIN.Big)
  in let
    head_19 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons head_22 (ErlangCons head_24 ErlangEmptyList)]
  in let
    fun_29 =
      ErlangFun 0
        (let
           lambda_30 [] =
             EXC.tryOfCatch
               (\ _ ->
                  erlps__serialize__2
                    [ErlangCons head_0 (ErlangCons head_6 ErlangEmptyList),
                     ErlangCons head_13 (ErlangCons head_19 ErlangEmptyList)])
               (\ of_33 ->
                  let   
                    head_40 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_46 = toErl 33
                  in let head_44 = ErlangTuple [ErlangAtom "line", tup_el_46]
                  in let tup_el_50 = toErl "serialize ( Template , Values )"
                  in let
                    head_48 = ErlangTuple [ErlangAtom "expression", tup_el_50]
                  in let lop_55 = toErl "{ "
                  in let lop_57 = toErl "error"
                  in let lop_59 = toErl " , "
                  in let lop_61 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                  in let rop_62 = toErl " , [...] }"
                  in let rop_60 = BIF.erlang__op_append [lop_61, rop_62]
                  in let rop_58 = BIF.erlang__op_append [lop_59, rop_60]
                  in let rop_56 = BIF.erlang__op_append [lop_57, rop_58]
                  in let tup_el_54 = BIF.erlang__op_append [lop_55, rop_56]
                  in let head_52 = ErlangTuple [ErlangAtom "pattern", tup_el_54]
                  in let
                    head_64 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_33]
                  in let
                    arg_37 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_40
                           (ErlangCons head_44
                              (ErlangCons head_48
                                 (ErlangCons head_52
                                    (ErlangCons head_64 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_37])
               (\ ex_34 ->
                  case ex_34 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_field"), _,
                                                _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_68, __t_69, __s_70]) ->
                      let   
                        head_74 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_80 = toErl 33
                      in let
                        head_78 = ErlangTuple [ErlangAtom "line", tup_el_80]
                      in let tup_el_84 = toErl "serialize ( Template , Values )"
                      in let
                        head_82 =
                          ErlangTuple [ErlangAtom "expression", tup_el_84]
                      in let lop_89 = toErl "{ "
                      in let lop_91 = toErl "error"
                      in let lop_93 = toErl " , "
                      in let
                        lop_95 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                      in let rop_96 = toErl " , [...] }"
                      in let rop_94 = BIF.erlang__op_append [lop_95, rop_96]
                      in let rop_92 = BIF.erlang__op_append [lop_93, rop_94]
                      in let rop_90 = BIF.erlang__op_append [lop_91, rop_92]
                      in let tup_el_88 = BIF.erlang__op_append [lop_89, rop_90]
                      in let
                        head_86 = ErlangTuple [ErlangAtom "pattern", tup_el_88]
                      in let tup_el_100 = ErlangTuple [__c_68, __t_69, __s_70]
                      in let
                        head_98 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_100]
                      in let
                        arg_71 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_74
                               (ErlangCons head_78
                                  (ErlangCons head_82
                                     (ErlangCons head_86
                                        (ErlangCons head_98 ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_71]
                    ex_35 -> EXC.raise ex_35)
           lambda_30 [] = EXC.function_clause unit
           lambda_30 args = EXC.badarity (ErlangFun 0 lambda_30) args
         in lambda_30)
  in BIF.erlang__apply__2 [fun_29, ErlangEmptyList]
erlps__list_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__deep_list_test__0 :: ErlangFun
erlps__deep_list_test__0 [] =
  let   
    head_0 =
      ErlangTuple
        [ErlangAtom "foo",
         ErlangCons (ErlangCons (ErlangAtom "int") ErlangEmptyList)
           ErlangEmptyList]
  in let
    head_8 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons
           (ErlangCons
              (ErlangCons
                 (ErlangCons (ErlangCons (ErlangAtom "binary") ErlangEmptyList)
                    ErlangEmptyList)
                 ErlangEmptyList)
              ErlangEmptyList)
           ErlangEmptyList]
  in let head_27 = toErl 1
  in let
    head_23 =
      ErlangTuple
        [ErlangAtom "foo",
         ErlangCons (ErlangCons head_27 ErlangEmptyList) ErlangEmptyList]
  in let bin_el_39 = toErl 2
  in let
    head_38 =
      ErlangBinary (BIN.fromInt bin_el_39 (toErl 8) 1 BIN.Big)
  in let
    head_31 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons
           (ErlangCons
              (ErlangCons
                 (ErlangCons (ErlangCons head_38 ErlangEmptyList)
                    ErlangEmptyList)
                 ErlangEmptyList)
              ErlangEmptyList)
           ErlangEmptyList]
  in let
    fun_47 =
      ErlangFun 0
        (let
           lambda_48 [] =
             let   
               arg_52 =
                 erlps__serialize__2
                   [ErlangCons head_0 (ErlangCons head_8 ErlangEmptyList),
                    ErlangCons head_23 (ErlangCons head_31 ErlangEmptyList)]
             in let
               case_50 =
                 erlps__deserialize__2
                   [ErlangCons head_0 (ErlangCons head_8 ErlangEmptyList),
                    arg_52]
             in
               case case_50 of
                 __x_55 | (__x_55 ==
                             (ErlangCons head_23
                                (ErlangCons head_31 ErlangEmptyList))) ->
                   ErlangAtom "ok"
                 __v_56 ->
                   let   
                     head_60 =
                       ErlangTuple
                         [ErlangAtom "module",
                          ErlangAtom "aeser_chain_objects_tests"]
                   in let tup_el_66 = toErl 38
                   in let head_64 = ErlangTuple [ErlangAtom "line", tup_el_66]
                   in let
                     tup_el_70 =
                       toErl
                         "deserialize ( Template , serialize ( Template , Values ) )"
                   in let
                     head_68 = ErlangTuple [ErlangAtom "expression", tup_el_70]
                   in let
                     head_72 =
                       ErlangTuple
                         [ErlangAtom "expected",
                          ErlangCons head_23
                            (ErlangCons head_31 ErlangEmptyList)]
                   in let head_76 = ErlangTuple [ErlangAtom "value", __v_56]
                   in let
                     arg_57 =
                       ErlangTuple
                         [ErlangAtom "assertEqual",
                          ErlangCons head_60
                            (ErlangCons head_64
                               (ErlangCons head_68
                                  (ErlangCons head_72
                                     (ErlangCons head_76 ErlangEmptyList))))]
                   in BIF.erlang__error__1 [arg_57]
           lambda_48 [] = EXC.function_clause unit
           lambda_48 args = EXC.badarity (ErlangFun 0 lambda_48) args
         in lambda_48)
  in BIF.erlang__apply__2 [fun_47, ErlangEmptyList]
erlps__deep_list_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__deep_list_fail_test__0 :: ErlangFun
erlps__deep_list_fail_test__0 [] =
  let   
    head_0 =
      ErlangTuple
        [ErlangAtom "foo",
         ErlangCons (ErlangCons (ErlangAtom "int") ErlangEmptyList)
           ErlangEmptyList]
  in let
    head_8 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons
           (ErlangCons
              (ErlangCons
                 (ErlangCons (ErlangCons (ErlangAtom "binary") ErlangEmptyList)
                    ErlangEmptyList)
                 ErlangEmptyList)
              ErlangEmptyList)
           ErlangEmptyList]
  in let head_27 = toErl 1
  in let
    head_23 =
      ErlangTuple
        [ErlangAtom "foo",
         ErlangCons (ErlangCons head_27 ErlangEmptyList) ErlangEmptyList]
  in let head_38 = toErl 2
  in let
    head_31 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons
           (ErlangCons
              (ErlangCons
                 (ErlangCons (ErlangCons head_38 ErlangEmptyList)
                    ErlangEmptyList)
                 ErlangEmptyList)
              ErlangEmptyList)
           ErlangEmptyList]
  in let
    fun_46 =
      ErlangFun 0
        (let
           lambda_47 [] =
             EXC.tryOfCatch
               (\ _ ->
                  erlps__serialize__2
                    [ErlangCons head_0 (ErlangCons head_8 ErlangEmptyList),
                     ErlangCons head_23 (ErlangCons head_31 ErlangEmptyList)])
               (\ of_50 ->
                  let   
                    head_57 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_63 = toErl 43
                  in let head_61 = ErlangTuple [ErlangAtom "line", tup_el_63]
                  in let tup_el_67 = toErl "serialize ( Template , Values )"
                  in let
                    head_65 = ErlangTuple [ErlangAtom "expression", tup_el_67]
                  in let lop_72 = toErl "{ "
                  in let lop_74 = toErl "error"
                  in let lop_76 = toErl " , "
                  in let lop_78 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                  in let rop_79 = toErl " , [...] }"
                  in let rop_77 = BIF.erlang__op_append [lop_78, rop_79]
                  in let rop_75 = BIF.erlang__op_append [lop_76, rop_77]
                  in let rop_73 = BIF.erlang__op_append [lop_74, rop_75]
                  in let tup_el_71 = BIF.erlang__op_append [lop_72, rop_73]
                  in let head_69 = ErlangTuple [ErlangAtom "pattern", tup_el_71]
                  in let
                    head_81 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_50]
                  in let
                    arg_54 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_57
                           (ErlangCons head_61
                              (ErlangCons head_65
                                 (ErlangCons head_69
                                    (ErlangCons head_81 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_54])
               (\ ex_51 ->
                  case ex_51 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_field"), _,
                                                _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_85, __t_86, __s_87]) ->
                      let   
                        head_91 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_97 = toErl 43
                      in let
                        head_95 = ErlangTuple [ErlangAtom "line", tup_el_97]
                      in let
                        tup_el_101 = toErl "serialize ( Template , Values )"
                      in let
                        head_99 =
                          ErlangTuple [ErlangAtom "expression", tup_el_101]
                      in let lop_106 = toErl "{ "
                      in let lop_108 = toErl "error"
                      in let lop_110 = toErl " , "
                      in let
                        lop_112 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                      in let rop_113 = toErl " , [...] }"
                      in let rop_111 = BIF.erlang__op_append [lop_112, rop_113]
                      in let rop_109 = BIF.erlang__op_append [lop_110, rop_111]
                      in let rop_107 = BIF.erlang__op_append [lop_108, rop_109]
                      in let
                        tup_el_105 = BIF.erlang__op_append [lop_106, rop_107]
                      in let
                        head_103 =
                          ErlangTuple [ErlangAtom "pattern", tup_el_105]
                      in let tup_el_117 = ErlangTuple [__c_85, __t_86, __s_87]
                      in let
                        head_115 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_117]
                      in let
                        arg_88 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_91
                               (ErlangCons head_95
                                  (ErlangCons head_99
                                     (ErlangCons head_103
                                        (ErlangCons head_115
                                           ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_88]
                    ex_52 -> EXC.raise ex_52)
           lambda_47 [] = EXC.function_clause unit
           lambda_47 args = EXC.badarity (ErlangFun 0 lambda_47) args
         in lambda_47)
  in BIF.erlang__apply__2 [fun_46, ErlangEmptyList]
erlps__deep_list_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__array_test__0 :: ErlangFun
erlps__array_test__0 [] =
  let   
    tup_el_2 = ErlangTuple [ErlangAtom "int", ErlangAtom "binary"]
  in let head_0 = ErlangTuple [ErlangAtom "foo", tup_el_2]
  in let head_9 = ErlangTuple [ErlangAtom "int", ErlangAtom "int"]
  in let
    head_6 =
      ErlangTuple [ErlangAtom "bar", ErlangCons head_9 ErlangEmptyList]
  in let tup_el_16 = ErlangTuple [ErlangAtom "int"]
  in let head_14 = ErlangTuple [ErlangAtom "baz", tup_el_16]
  in let tup_el_23 = toErl 1
  in let bin_el_25 = toErl 102
  in let bin_el_26 = toErl 111
  in let bin_el_27 = toErl 111
  in let
    tup_el_24 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_25 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_27 (toErl 8) 1 BIN.Big])
  in let tup_el_22 = ErlangTuple [tup_el_23, tup_el_24]
  in let head_20 = ErlangTuple [ErlangAtom "foo", tup_el_22]
  in let tup_el_33 = toErl 1
  in let tup_el_34 = toErl 2
  in let head_32 = ErlangTuple [tup_el_33, tup_el_34]
  in let tup_el_37 = toErl 3
  in let tup_el_38 = toErl 4
  in let head_36 = ErlangTuple [tup_el_37, tup_el_38]
  in let tup_el_41 = toErl 5
  in let tup_el_42 = toErl 6
  in let head_40 = ErlangTuple [tup_el_41, tup_el_42]
  in let
    head_29 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons head_32
           (ErlangCons head_36 (ErlangCons head_40 ErlangEmptyList))]
  in let tup_el_48 = toErl 1
  in let tup_el_47 = ErlangTuple [tup_el_48]
  in let head_45 = ErlangTuple [ErlangAtom "baz", tup_el_47]
  in let
    fun_51 =
      ErlangFun 0
        (let
           lambda_52 [] =
             let   
               arg_56 =
                 erlps__serialize__2
                   [ErlangCons head_0
                      (ErlangCons head_6 (ErlangCons head_14 ErlangEmptyList)),
                    ErlangCons head_20
                      (ErlangCons head_29 (ErlangCons head_45 ErlangEmptyList))]
             in let
               case_54 =
                 erlps__deserialize__2
                   [ErlangCons head_0
                      (ErlangCons head_6 (ErlangCons head_14 ErlangEmptyList)),
                    arg_56]
             in
               case case_54 of
                 __x_59 | (__x_59 ==
                             (ErlangCons head_20
                                (ErlangCons head_29
                                   (ErlangCons head_45 ErlangEmptyList)))) ->
                   ErlangAtom "ok"
                 __v_60 ->
                   let   
                     head_64 =
                       ErlangTuple
                         [ErlangAtom "module",
                          ErlangAtom "aeser_chain_objects_tests"]
                   in let tup_el_70 = toErl 48
                   in let head_68 = ErlangTuple [ErlangAtom "line", tup_el_70]
                   in let
                     tup_el_74 =
                       toErl
                         "deserialize ( Template , serialize ( Template , Values ) )"
                   in let
                     head_72 = ErlangTuple [ErlangAtom "expression", tup_el_74]
                   in let
                     head_76 =
                       ErlangTuple
                         [ErlangAtom "expected",
                          ErlangCons head_20
                            (ErlangCons head_29
                               (ErlangCons head_45 ErlangEmptyList))]
                   in let head_80 = ErlangTuple [ErlangAtom "value", __v_60]
                   in let
                     arg_61 =
                       ErlangTuple
                         [ErlangAtom "assertEqual",
                          ErlangCons head_64
                            (ErlangCons head_68
                               (ErlangCons head_72
                                  (ErlangCons head_76
                                     (ErlangCons head_80 ErlangEmptyList))))]
                   in BIF.erlang__error__1 [arg_61]
           lambda_52 [] = EXC.function_clause unit
           lambda_52 args = EXC.badarity (ErlangFun 0 lambda_52) args
         in lambda_52)
  in BIF.erlang__apply__2 [fun_51, ErlangEmptyList]
erlps__array_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__array_fail_test__0 :: ErlangFun
erlps__array_fail_test__0 [] =
  let   
    tup_el_2 = ErlangTuple [ErlangAtom "int", ErlangAtom "binary"]
  in let head_0 = ErlangTuple [ErlangAtom "foo", tup_el_2]
  in let head_9 = ErlangTuple [ErlangAtom "int", ErlangAtom "int"]
  in let
    head_6 =
      ErlangTuple [ErlangAtom "bar", ErlangCons head_9 ErlangEmptyList]
  in let tup_el_16 = ErlangTuple [ErlangAtom "int"]
  in let head_14 = ErlangTuple [ErlangAtom "baz", tup_el_16]
  in let tup_el_23 = toErl 1
  in let bin_el_25 = toErl 102
  in let bin_el_26 = toErl 111
  in let bin_el_27 = toErl 111
  in let
    tup_el_24 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_25 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_26 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_27 (toErl 8) 1 BIN.Big])
  in let tup_el_22 = ErlangTuple [tup_el_23, tup_el_24]
  in let head_20 = ErlangTuple [ErlangAtom "foo", tup_el_22]
  in let tup_el_33 = toErl 1
  in let tup_el_34 = toErl 2
  in let head_32 = ErlangTuple [tup_el_33, tup_el_34]
  in let tup_el_37 = toErl 3
  in let tup_el_38 = toErl 4
  in let head_36 = ErlangTuple [tup_el_37, tup_el_38]
  in let tup_el_41 = toErl 5
  in let tup_el_42 = toErl 6
  in let head_40 = ErlangTuple [tup_el_41, tup_el_42]
  in let
    head_29 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons head_32
           (ErlangCons head_36 (ErlangCons head_40 ErlangEmptyList))]
  in let tup_el_48 = toErl 1
  in let tup_el_49 = toErl 1
  in let tup_el_47 = ErlangTuple [tup_el_48, tup_el_49]
  in let head_45 = ErlangTuple [ErlangAtom "baz", tup_el_47]
  in let
    fun_52 =
      ErlangFun 0
        (let
           lambda_53 [] =
             EXC.tryOfCatch
               (\ _ ->
                  erlps__serialize__2
                    [ErlangCons head_0
                       (ErlangCons head_6 (ErlangCons head_14 ErlangEmptyList)),
                     ErlangCons head_20
                       (ErlangCons head_29
                          (ErlangCons head_45 ErlangEmptyList))])
               (\ of_56 ->
                  let   
                    head_63 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_69 = toErl 53
                  in let head_67 = ErlangTuple [ErlangAtom "line", tup_el_69]
                  in let tup_el_73 = toErl "serialize ( Template , Values )"
                  in let
                    head_71 = ErlangTuple [ErlangAtom "expression", tup_el_73]
                  in let lop_78 = toErl "{ "
                  in let lop_80 = toErl "error"
                  in let lop_82 = toErl " , "
                  in let lop_84 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                  in let rop_85 = toErl " , [...] }"
                  in let rop_83 = BIF.erlang__op_append [lop_84, rop_85]
                  in let rop_81 = BIF.erlang__op_append [lop_82, rop_83]
                  in let rop_79 = BIF.erlang__op_append [lop_80, rop_81]
                  in let tup_el_77 = BIF.erlang__op_append [lop_78, rop_79]
                  in let head_75 = ErlangTuple [ErlangAtom "pattern", tup_el_77]
                  in let
                    head_87 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_56]
                  in let
                    arg_60 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_63
                           (ErlangCons head_67
                              (ErlangCons head_71
                                 (ErlangCons head_75
                                    (ErlangCons head_87 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_60])
               (\ ex_57 ->
                  case ex_57 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_field"), _,
                                                _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_91, __t_92, __s_93]) ->
                      let   
                        head_97 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_103 = toErl 53
                      in let
                        head_101 = ErlangTuple [ErlangAtom "line", tup_el_103]
                      in let
                        tup_el_107 = toErl "serialize ( Template , Values )"
                      in let
                        head_105 =
                          ErlangTuple [ErlangAtom "expression", tup_el_107]
                      in let lop_112 = toErl "{ "
                      in let lop_114 = toErl "error"
                      in let lop_116 = toErl " , "
                      in let
                        lop_118 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                      in let rop_119 = toErl " , [...] }"
                      in let rop_117 = BIF.erlang__op_append [lop_118, rop_119]
                      in let rop_115 = BIF.erlang__op_append [lop_116, rop_117]
                      in let rop_113 = BIF.erlang__op_append [lop_114, rop_115]
                      in let
                        tup_el_111 = BIF.erlang__op_append [lop_112, rop_113]
                      in let
                        head_109 =
                          ErlangTuple [ErlangAtom "pattern", tup_el_111]
                      in let tup_el_123 = ErlangTuple [__c_91, __t_92, __s_93]
                      in let
                        head_121 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_123]
                      in let
                        arg_94 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_97
                               (ErlangCons head_101
                                  (ErlangCons head_105
                                     (ErlangCons head_109
                                        (ErlangCons head_121
                                           ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_94]
                    ex_58 -> EXC.raise ex_58)
           lambda_53 [] = EXC.function_clause unit
           lambda_53 args = EXC.badarity (ErlangFun 0 lambda_53) args
         in lambda_53)
  in BIF.erlang__apply__2 [fun_52, ErlangEmptyList]
erlps__array_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__deep_array_test__0 :: ErlangFun
erlps__deep_array_test__0 [] =
  let   
    tup_el_3 = ErlangTuple [ErlangAtom "int", ErlangAtom "binary"]
  in let tup_el_2 = ErlangTuple [tup_el_3]
  in let head_0 = ErlangTuple [ErlangAtom "foo", tup_el_2]
  in let tup_el_11 = ErlangTuple [ErlangAtom "int"]
  in let head_10 = ErlangTuple [tup_el_11, ErlangAtom "int"]
  in let
    head_7 =
      ErlangTuple
        [ErlangAtom "bar", ErlangCons head_10 ErlangEmptyList]
  in let tup_el_19 = ErlangTuple [ErlangAtom "int"]
  in let tup_el_18 = ErlangTuple [tup_el_19]
  in let head_16 = ErlangTuple [ErlangAtom "baz", tup_el_18]
  in let tup_el_27 = toErl 1
  in let bin_el_29 = toErl 102
  in let bin_el_30 = toErl 111
  in let bin_el_31 = toErl 111
  in let
    tup_el_28 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_30 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_31 (toErl 8) 1 BIN.Big])
  in let tup_el_26 = ErlangTuple [tup_el_27, tup_el_28]
  in let tup_el_25 = ErlangTuple [tup_el_26]
  in let head_23 = ErlangTuple [ErlangAtom "foo", tup_el_25]
  in let tup_el_38 = toErl 1
  in let tup_el_37 = ErlangTuple [tup_el_38]
  in let tup_el_39 = toErl 2
  in let head_36 = ErlangTuple [tup_el_37, tup_el_39]
  in let tup_el_43 = toErl 3
  in let tup_el_42 = ErlangTuple [tup_el_43]
  in let tup_el_44 = toErl 4
  in let head_41 = ErlangTuple [tup_el_42, tup_el_44]
  in let tup_el_48 = toErl 5
  in let tup_el_47 = ErlangTuple [tup_el_48]
  in let tup_el_49 = toErl 6
  in let head_46 = ErlangTuple [tup_el_47, tup_el_49]
  in let
    head_33 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons head_36
           (ErlangCons head_41 (ErlangCons head_46 ErlangEmptyList))]
  in let tup_el_56 = toErl 1
  in let tup_el_55 = ErlangTuple [tup_el_56]
  in let tup_el_54 = ErlangTuple [tup_el_55]
  in let head_52 = ErlangTuple [ErlangAtom "baz", tup_el_54]
  in let
    fun_59 =
      ErlangFun 0
        (let
           lambda_60 [] =
             let   
               arg_64 =
                 erlps__serialize__2
                   [ErlangCons head_0
                      (ErlangCons head_7 (ErlangCons head_16 ErlangEmptyList)),
                    ErlangCons head_23
                      (ErlangCons head_33 (ErlangCons head_52 ErlangEmptyList))]
             in let
               case_62 =
                 erlps__deserialize__2
                   [ErlangCons head_0
                      (ErlangCons head_7 (ErlangCons head_16 ErlangEmptyList)),
                    arg_64]
             in
               case case_62 of
                 __x_67 | (__x_67 ==
                             (ErlangCons head_23
                                (ErlangCons head_33
                                   (ErlangCons head_52 ErlangEmptyList)))) ->
                   ErlangAtom "ok"
                 __v_68 ->
                   let   
                     head_72 =
                       ErlangTuple
                         [ErlangAtom "module",
                          ErlangAtom "aeser_chain_objects_tests"]
                   in let tup_el_78 = toErl 58
                   in let head_76 = ErlangTuple [ErlangAtom "line", tup_el_78]
                   in let
                     tup_el_82 =
                       toErl
                         "deserialize ( Template , serialize ( Template , Values ) )"
                   in let
                     head_80 = ErlangTuple [ErlangAtom "expression", tup_el_82]
                   in let
                     head_84 =
                       ErlangTuple
                         [ErlangAtom "expected",
                          ErlangCons head_23
                            (ErlangCons head_33
                               (ErlangCons head_52 ErlangEmptyList))]
                   in let head_88 = ErlangTuple [ErlangAtom "value", __v_68]
                   in let
                     arg_69 =
                       ErlangTuple
                         [ErlangAtom "assertEqual",
                          ErlangCons head_72
                            (ErlangCons head_76
                               (ErlangCons head_80
                                  (ErlangCons head_84
                                     (ErlangCons head_88 ErlangEmptyList))))]
                   in BIF.erlang__error__1 [arg_69]
           lambda_60 [] = EXC.function_clause unit
           lambda_60 args = EXC.badarity (ErlangFun 0 lambda_60) args
         in lambda_60)
  in BIF.erlang__apply__2 [fun_59, ErlangEmptyList]
erlps__deep_array_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__deep_array_fail_test__0 :: ErlangFun
erlps__deep_array_fail_test__0 [] =
  let   
    tup_el_3 = ErlangTuple [ErlangAtom "int", ErlangAtom "binary"]
  in let tup_el_2 = ErlangTuple [tup_el_3]
  in let head_0 = ErlangTuple [ErlangAtom "foo", tup_el_2]
  in let tup_el_11 = ErlangTuple [ErlangAtom "int"]
  in let head_10 = ErlangTuple [tup_el_11, ErlangAtom "int"]
  in let
    head_7 =
      ErlangTuple
        [ErlangAtom "bar", ErlangCons head_10 ErlangEmptyList]
  in let tup_el_19 = ErlangTuple [ErlangAtom "binary"]
  in let tup_el_18 = ErlangTuple [tup_el_19]
  in let head_16 = ErlangTuple [ErlangAtom "baz", tup_el_18]
  in let tup_el_27 = toErl 1
  in let bin_el_29 = toErl 102
  in let bin_el_30 = toErl 111
  in let bin_el_31 = toErl 111
  in let
    tup_el_28 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt bin_el_29 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_30 (toErl 8) 1 BIN.Big,
            BIN.fromInt bin_el_31 (toErl 8) 1 BIN.Big])
  in let tup_el_26 = ErlangTuple [tup_el_27, tup_el_28]
  in let tup_el_25 = ErlangTuple [tup_el_26]
  in let head_23 = ErlangTuple [ErlangAtom "foo", tup_el_25]
  in let tup_el_38 = toErl 1
  in let tup_el_37 = ErlangTuple [tup_el_38]
  in let tup_el_39 = toErl 2
  in let head_36 = ErlangTuple [tup_el_37, tup_el_39]
  in let tup_el_43 = toErl 3
  in let tup_el_42 = ErlangTuple [tup_el_43]
  in let tup_el_44 = toErl 4
  in let head_41 = ErlangTuple [tup_el_42, tup_el_44]
  in let tup_el_48 = toErl 5
  in let tup_el_47 = ErlangTuple [tup_el_48]
  in let tup_el_49 = toErl 6
  in let head_46 = ErlangTuple [tup_el_47, tup_el_49]
  in let
    head_33 =
      ErlangTuple
        [ErlangAtom "bar",
         ErlangCons head_36
           (ErlangCons head_41 (ErlangCons head_46 ErlangEmptyList))]
  in let tup_el_56 = toErl 1
  in let tup_el_55 = ErlangTuple [tup_el_56]
  in let tup_el_54 = ErlangTuple [tup_el_55]
  in let head_52 = ErlangTuple [ErlangAtom "baz", tup_el_54]
  in let
    fun_59 =
      ErlangFun 0
        (let
           lambda_60 [] =
             EXC.tryOfCatch
               (\ _ ->
                  erlps__serialize__2
                    [ErlangCons head_0
                       (ErlangCons head_7 (ErlangCons head_16 ErlangEmptyList)),
                     ErlangCons head_23
                       (ErlangCons head_33
                          (ErlangCons head_52 ErlangEmptyList))])
               (\ of_63 ->
                  let   
                    head_70 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_76 = toErl 63
                  in let head_74 = ErlangTuple [ErlangAtom "line", tup_el_76]
                  in let tup_el_80 = toErl "serialize ( Template , Values )"
                  in let
                    head_78 = ErlangTuple [ErlangAtom "expression", tup_el_80]
                  in let lop_85 = toErl "{ "
                  in let lop_87 = toErl "error"
                  in let lop_89 = toErl " , "
                  in let lop_91 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                  in let rop_92 = toErl " , [...] }"
                  in let rop_90 = BIF.erlang__op_append [lop_91, rop_92]
                  in let rop_88 = BIF.erlang__op_append [lop_89, rop_90]
                  in let rop_86 = BIF.erlang__op_append [lop_87, rop_88]
                  in let tup_el_84 = BIF.erlang__op_append [lop_85, rop_86]
                  in let head_82 = ErlangTuple [ErlangAtom "pattern", tup_el_84]
                  in let
                    head_94 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_63]
                  in let
                    arg_67 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_70
                           (ErlangCons head_74
                              (ErlangCons head_78
                                 (ErlangCons head_82
                                    (ErlangCons head_94 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_67])
               (\ ex_64 ->
                  case ex_64 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_field"), _,
                                                _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_98, __t_99, __s_100]) ->
                      let   
                        head_104 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_110 = toErl 63
                      in let
                        head_108 = ErlangTuple [ErlangAtom "line", tup_el_110]
                      in let
                        tup_el_114 = toErl "serialize ( Template , Values )"
                      in let
                        head_112 =
                          ErlangTuple [ErlangAtom "expression", tup_el_114]
                      in let lop_119 = toErl "{ "
                      in let lop_121 = toErl "error"
                      in let lop_123 = toErl " , "
                      in let
                        lop_125 = toErl "{ illegal_field , _ , _ , _ , _ , _ }"
                      in let rop_126 = toErl " , [...] }"
                      in let rop_124 = BIF.erlang__op_append [lop_125, rop_126]
                      in let rop_122 = BIF.erlang__op_append [lop_123, rop_124]
                      in let rop_120 = BIF.erlang__op_append [lop_121, rop_122]
                      in let
                        tup_el_118 = BIF.erlang__op_append [lop_119, rop_120]
                      in let
                        head_116 =
                          ErlangTuple [ErlangAtom "pattern", tup_el_118]
                      in let tup_el_130 = ErlangTuple [__c_98, __t_99, __s_100]
                      in let
                        head_128 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_130]
                      in let
                        arg_101 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_104
                               (ErlangCons head_108
                                  (ErlangCons head_112
                                     (ErlangCons head_116
                                        (ErlangCons head_128
                                           ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_101]
                    ex_65 -> EXC.raise ex_65)
           lambda_60 [] = EXC.function_clause unit
           lambda_60 args = EXC.badarity (ErlangFun 0 lambda_60) args
         in lambda_60)
  in BIF.erlang__apply__2 [fun_59, ErlangEmptyList]
erlps__deep_array_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__tag_fail_test__0 :: ErlangFun
erlps__tag_fail_test__0 [] =
  let    head_0 = ErlangTuple [ErlangAtom "foo", ErlangAtom "int"]
  in let
    head_4 = ErlangTuple [ErlangAtom "bar", ErlangAtom "binary"]
  in let tup_el_11 = toErl 1
  in let head_9 = ErlangTuple [ErlangAtom "foo", tup_el_11]
  in let bin_el_16 = toErl 2
  in let
    tup_el_15 =
      ErlangBinary (BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big)
  in let head_13 = ErlangTuple [ErlangAtom "bar", tup_el_15]
  in let
    fun_19 =
      ErlangFun 0
        (let
           lambda_20 [] =
             EXC.tryOfCatch
               (\ _ ->
                  let   
                    arg_22 =
                      erlps__serialize__2
                        [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                         ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)]
                  in let arg_26 = toErl 1
                  in
                    erlps__deserialize__4
                      [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                       arg_22, ErlangAtom "signed_tx", arg_26])
               (\ of_27 ->
                  let   
                    head_34 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_40 = toErl 69
                  in let head_38 = ErlangTuple [ErlangAtom "line", tup_el_40]
                  in let
                    tup_el_44 =
                      toErl
                        "deserialize ( Template , serialize ( Template , Values ) , signed_tx , ? DEFAULT_VERSION )"
                  in let
                    head_42 = ErlangTuple [ErlangAtom "expression", tup_el_44]
                  in let lop_49 = toErl "{ "
                  in let lop_51 = toErl "error"
                  in let lop_53 = toErl " , "
                  in let
                    lop_55 =
                      toErl "{ illegal_serialization , _ , _ , _ , _ , _ , _ }"
                  in let rop_56 = toErl " , [...] }"
                  in let rop_54 = BIF.erlang__op_append [lop_55, rop_56]
                  in let rop_52 = BIF.erlang__op_append [lop_53, rop_54]
                  in let rop_50 = BIF.erlang__op_append [lop_51, rop_52]
                  in let tup_el_48 = BIF.erlang__op_append [lop_49, rop_50]
                  in let head_46 = ErlangTuple [ErlangAtom "pattern", tup_el_48]
                  in let
                    head_58 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_27]
                  in let
                    arg_31 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_34
                           (ErlangCons head_38
                              (ErlangCons head_42
                                 (ErlangCons head_46
                                    (ErlangCons head_58 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_31])
               (\ ex_28 ->
                  case ex_28 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_serialization"),
                                                _, _, _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_62, __t_63, __s_64]) ->
                      let   
                        head_68 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_74 = toErl 68
                      in let
                        head_72 = ErlangTuple [ErlangAtom "line", tup_el_74]
                      in let
                        tup_el_78 =
                          toErl
                            "deserialize ( Template , serialize ( Template , Values ) , signed_tx , ? DEFAULT_VERSION )"
                      in let
                        head_76 =
                          ErlangTuple [ErlangAtom "expression", tup_el_78]
                      in let lop_83 = toErl "{ "
                      in let lop_85 = toErl "error"
                      in let lop_87 = toErl " , "
                      in let
                        lop_89 =
                          toErl
                            "{ illegal_serialization , _ , _ , _ , _ , _ , _ }"
                      in let rop_90 = toErl " , [...] }"
                      in let rop_88 = BIF.erlang__op_append [lop_89, rop_90]
                      in let rop_86 = BIF.erlang__op_append [lop_87, rop_88]
                      in let rop_84 = BIF.erlang__op_append [lop_85, rop_86]
                      in let tup_el_82 = BIF.erlang__op_append [lop_83, rop_84]
                      in let
                        head_80 = ErlangTuple [ErlangAtom "pattern", tup_el_82]
                      in let tup_el_94 = ErlangTuple [__c_62, __t_63, __s_64]
                      in let
                        head_92 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_94]
                      in let
                        arg_65 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_68
                               (ErlangCons head_72
                                  (ErlangCons head_76
                                     (ErlangCons head_80
                                        (ErlangCons head_92 ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_65]
                    ex_29 -> EXC.raise ex_29)
           lambda_20 [] = EXC.function_clause unit
           lambda_20 args = EXC.badarity (ErlangFun 0 lambda_20) args
         in lambda_20)
  in BIF.erlang__apply__2 [fun_19, ErlangEmptyList]
erlps__tag_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__vsn_fail_test__0 :: ErlangFun
erlps__vsn_fail_test__0 [] =
  let    head_0 = ErlangTuple [ErlangAtom "foo", ErlangAtom "int"]
  in let
    head_4 = ErlangTuple [ErlangAtom "bar", ErlangAtom "binary"]
  in let tup_el_11 = toErl 1
  in let head_9 = ErlangTuple [ErlangAtom "foo", tup_el_11]
  in let bin_el_16 = toErl 2
  in let
    tup_el_15 =
      ErlangBinary (BIN.fromInt bin_el_16 (toErl 8) 1 BIN.Big)
  in let head_13 = ErlangTuple [ErlangAtom "bar", tup_el_15]
  in let
    fun_19 =
      ErlangFun 0
        (let
           lambda_20 [] =
             EXC.tryOfCatch
               (\ _ ->
                  let   
                    arg_22 =
                      erlps__serialize__2
                        [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                         ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)]
                  in let arg_26 = toErl 2
                  in
                    erlps__deserialize__4
                      [ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList),
                       arg_22, ErlangAtom "account", arg_26])
               (\ of_27 ->
                  let   
                    head_34 =
                      ErlangTuple
                        [ErlangAtom "module",
                         ErlangAtom "aeser_chain_objects_tests"]
                  in let tup_el_40 = toErl 75
                  in let head_38 = ErlangTuple [ErlangAtom "line", tup_el_40]
                  in let
                    tup_el_44 =
                      toErl
                        "deserialize ( Template , serialize ( Template , Values ) , ? DEFAULT_TAG , 2 )"
                  in let
                    head_42 = ErlangTuple [ErlangAtom "expression", tup_el_44]
                  in let lop_49 = toErl "{ "
                  in let lop_51 = toErl "error"
                  in let lop_53 = toErl " , "
                  in let
                    lop_55 =
                      toErl "{ illegal_serialization , _ , _ , _ , _ , _ , _ }"
                  in let rop_56 = toErl " , [...] }"
                  in let rop_54 = BIF.erlang__op_append [lop_55, rop_56]
                  in let rop_52 = BIF.erlang__op_append [lop_53, rop_54]
                  in let rop_50 = BIF.erlang__op_append [lop_51, rop_52]
                  in let tup_el_48 = BIF.erlang__op_append [lop_49, rop_50]
                  in let head_46 = ErlangTuple [ErlangAtom "pattern", tup_el_48]
                  in let
                    head_58 =
                      ErlangTuple [ErlangAtom "unexpected_success", of_27]
                  in let
                    arg_31 =
                      ErlangTuple
                        [ErlangAtom "assertException",
                         ErlangCons head_34
                           (ErlangCons head_38
                              (ErlangCons head_42
                                 (ErlangCons head_46
                                    (ErlangCons head_58 ErlangEmptyList))))]
                  in BIF.erlang__error__1 [arg_31])
               (\ ex_28 ->
                  case ex_28 of
                    (ErlangTuple [(ErlangAtom "error"),
                                  (ErlangTuple [(ErlangAtom "illegal_serialization"),
                                                _, _, _, _, _, _]),
                                  _]) ->
                      ErlangAtom "ok"
                    (ErlangTuple [__c_62, __t_63, __s_64]) ->
                      let   
                        head_68 =
                          ErlangTuple
                            [ErlangAtom "module",
                             ErlangAtom "aeser_chain_objects_tests"]
                      in let tup_el_74 = toErl 74
                      in let
                        head_72 = ErlangTuple [ErlangAtom "line", tup_el_74]
                      in let
                        tup_el_78 =
                          toErl
                            "deserialize ( Template , serialize ( Template , Values ) , ? DEFAULT_TAG , 2 )"
                      in let
                        head_76 =
                          ErlangTuple [ErlangAtom "expression", tup_el_78]
                      in let lop_83 = toErl "{ "
                      in let lop_85 = toErl "error"
                      in let lop_87 = toErl " , "
                      in let
                        lop_89 =
                          toErl
                            "{ illegal_serialization , _ , _ , _ , _ , _ , _ }"
                      in let rop_90 = toErl " , [...] }"
                      in let rop_88 = BIF.erlang__op_append [lop_89, rop_90]
                      in let rop_86 = BIF.erlang__op_append [lop_87, rop_88]
                      in let rop_84 = BIF.erlang__op_append [lop_85, rop_86]
                      in let tup_el_82 = BIF.erlang__op_append [lop_83, rop_84]
                      in let
                        head_80 = ErlangTuple [ErlangAtom "pattern", tup_el_82]
                      in let tup_el_94 = ErlangTuple [__c_62, __t_63, __s_64]
                      in let
                        head_92 =
                          ErlangTuple
                            [ErlangAtom "unexpected_exception", tup_el_94]
                      in let
                        arg_65 =
                          ErlangTuple
                            [ErlangAtom "assertException",
                             ErlangCons head_68
                               (ErlangCons head_72
                                  (ErlangCons head_76
                                     (ErlangCons head_80
                                        (ErlangCons head_92 ErlangEmptyList))))]
                      in BIF.erlang__error__1 [arg_65]
                    ex_29 -> EXC.raise ex_29)
           lambda_20 [] = EXC.function_clause unit
           lambda_20 args = EXC.badarity (ErlangFun 0 lambda_20) args
         in lambda_20)
  in BIF.erlang__apply__2 [fun_19, ErlangEmptyList]
erlps__vsn_fail_test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__deserialize__2 :: ErlangFun
erlps__deserialize__2 [template_0, bin_1] =
  let arg_5 = toErl 1
  in
    erlps__deserialize__4
      [template_0, bin_1, ErlangAtom "account", arg_5]
erlps__deserialize__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__deserialize__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__deserialize__4 :: ErlangFun
erlps__deserialize__4 [template_0, bin_1, tag_2, vsn_3] =
  BIF.do_remote_fun_call "Aeser.Chain.Objects"
    "erlps__deserialize__4" [tag_2, vsn_3, template_0, bin_1]
erlps__deserialize__4 [arg_8, arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__deserialize__4 args =
  EXC.badarity (ErlangFun 4 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__serialize__2 :: ErlangFun
erlps__serialize__2 [template_0, bin_1] =
  let arg_5 = toErl 1
  in
    erlps__serialize__4
      [template_0, bin_1, ErlangAtom "account", arg_5]
erlps__serialize__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__serialize__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__serialize__4 :: ErlangFun
erlps__serialize__4 [template_0, bin_1, tag_2, vsn_3] =
  BIF.do_remote_fun_call "Aeser.Chain.Objects"
    "erlps__serialize__4" [tag_2, vsn_3, template_0, bin_1]
erlps__serialize__4 [arg_8, arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__serialize__4 args =
  EXC.badarity (ErlangFun 4 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  BIF.do_remote_fun_call "Eunit" "erlps__test__1"
    [ErlangAtom "aeser_chain_objects_tests"]
erlps__test__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args