module Aeser.Chain.Objects.Tests(erlps__test__0,
                                 erlps__basic_test__0,
                                 erlps__basic_fail_test__0, erlps__list_test__0,
                                 erlps__list_fail_test__0,
                                 erlps__deep_list_test__0,
                                 erlps__deep_list_fail_test__0,
                                 erlps__array_test__0,
                                 erlps__array_fail_test__0,
                                 erlps__deep_array_test__0,
                                 erlps__deep_array_fail_test__0,
                                 erlps__tag_fail_test__0,
                                 erlps__vsn_fail_test__0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__basic_test__0 :: ErlangFun
erlps__basic_test__0 [] =
  let   
    head_0 = (ErlangTuple [(ErlangAtom "foo"), (ErlangAtom "int")])
  in let
    head_4 =
      (ErlangTuple [(ErlangAtom "bar"), (ErlangAtom "binary")])
  in let
    head_9 =
      (ErlangTuple [(ErlangAtom "foo"), (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_15 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let head_13 = (ErlangTuple [(ErlangAtom "bar"), tup_el_15])
  in let
    fun_19 =
      (ErlangFun 0
         let
           lambda_20 [] =
             let   
               arg_24 =
                 (erlps__serialize__2
                    [(ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList)),
                     (ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList))])
             in let
               case_22 =
                 (erlps__deserialize__2
                    [(ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList)),
                     arg_24])
             in
               case case_22 of
                 __x_27 | (__x_27 ==
                             (ErlangCons head_9
                                (ErlangCons head_13 ErlangEmptyList))) ->
                   (ErlangAtom "ok")
                 __v_28 ->
                   let   
                     head_32 =
                       (ErlangTuple
                          [(ErlangAtom "module"),
                           (ErlangAtom "aeser_chain_objects_tests")])
                   in let
                     head_36 =
                       (ErlangTuple
                          [(ErlangAtom "line"), (ErlangInt (DBI.fromInt 18))])
                   in let
                     tup_el_42 =
                       (make_string
                          "deserialize ( Template , serialize ( Template , Values ) )")
                   in let
                     head_40 =
                       (ErlangTuple [(ErlangAtom "expression"), tup_el_42])
                   in let
                     head_44 =
                       (ErlangTuple
                          [(ErlangAtom "expected"),
                           (ErlangCons head_9
                              (ErlangCons head_13 ErlangEmptyList))])
                   in let head_48 = (ErlangTuple [(ErlangAtom "value"), __v_28])
                   in let
                     arg_29 =
                       (ErlangTuple
                          [(ErlangAtom "assertEqual"),
                           (ErlangCons head_32
                              (ErlangCons head_36
                                 (ErlangCons head_40
                                    (ErlangCons head_44
                                       (ErlangCons head_48
                                          ErlangEmptyList)))))])
                   in (BIF.erlang__error__1 [arg_29])
                 something_else -> (EXC.case_clause something_else)
           lambda_20 [] = (EXC.function_clause unit)
           lambda_20 args = (EXC.badarity (ErlangFun 0 lambda_20) args)
         in lambda_20)
  in (BIF.erlang__apply__2 [fun_19, ErlangEmptyList])
erlps__basic_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basic_fail_test__0 :: ErlangFun
erlps__basic_fail_test__0 [] =
  let   
    head_0 = (ErlangTuple [(ErlangAtom "foo"), (ErlangAtom "int")])
  in let
    head_4 =
      (ErlangTuple [(ErlangAtom "bar"), (ErlangAtom "binary")])
  in let
    head_9 =
      (ErlangTuple [(ErlangAtom "foo"), (ErlangInt (DBI.fromInt 1))])
  in let
    head_13 =
      (ErlangTuple [(ErlangAtom "bar"), (ErlangInt (DBI.fromInt 1))])
  in let
    fun_18 =
      (ErlangFun 0
         let
           lambda_19 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   (erlps__serialize__2
                      [(ErlangCons head_0 (ErlangCons head_4 ErlangEmptyList)),
                       (ErlangCons head_9
                          (ErlangCons head_13 ErlangEmptyList))]))
                (\ of_22 ->
                   case of_22 of
                     __v_24 ->
                       let   
                         head_28 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_32 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 23))])
                       in let
                         tup_el_38 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_36 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_38])
                       in let lop_43 = (make_string "{ ")
                       in let lop_45 = (make_string "error")
                       in let lop_47 = (make_string " , ")
                       in let
                         lop_49 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_50 = (make_string " , [...] }")
                       in let rop_48 = (BIF.erlang__op_append [lop_49, rop_50])
                       in let rop_46 = (BIF.erlang__op_append [lop_47, rop_48])
                       in let rop_44 = (BIF.erlang__op_append [lop_45, rop_46])
                       in let
                         tup_el_42 = (BIF.erlang__op_append [lop_43, rop_44])
                       in let
                         head_40 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_42])
                       in let
                         head_52 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_24])
                       in let
                         arg_25 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_28
                                  (ErlangCons head_32
                                     (ErlangCons head_36
                                        (ErlangCons head_40
                                           (ErlangCons head_52
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_25])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_23 ->
                   case ex_23 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_field"),
                                                 _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_56, __t_57, __s_58]) ->
                       let   
                         head_62 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_66 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 23))])
                       in let
                         tup_el_72 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_70 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_72])
                       in let lop_77 = (make_string "{ ")
                       in let lop_79 = (make_string "error")
                       in let lop_81 = (make_string " , ")
                       in let
                         lop_83 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_84 = (make_string " , [...] }")
                       in let rop_82 = (BIF.erlang__op_append [lop_83, rop_84])
                       in let rop_80 = (BIF.erlang__op_append [lop_81, rop_82])
                       in let rop_78 = (BIF.erlang__op_append [lop_79, rop_80])
                       in let
                         tup_el_76 = (BIF.erlang__op_append [lop_77, rop_78])
                       in let
                         head_74 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_76])
                       in let tup_el_88 = (ErlangTuple [__c_56, __t_57, __s_58])
                       in let
                         head_86 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_88])
                       in let
                         arg_59 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_62
                                  (ErlangCons head_66
                                     (ErlangCons head_70
                                        (ErlangCons head_74
                                           (ErlangCons head_86
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_59])
                     ex_23 -> (EXC.raise ex_23)))
           lambda_19 [] = (EXC.function_clause unit)
           lambda_19 args = (EXC.badarity (ErlangFun 0 lambda_19) args)
         in lambda_19)
  in (BIF.erlang__apply__2 [fun_18, ErlangEmptyList])
erlps__basic_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_test__0 :: ErlangFun
erlps__list_test__0 [] =
  let   
    head_0 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons (ErlangAtom "int") ErlangEmptyList)])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons (ErlangAtom "binary") ErlangEmptyList)])
  in let
    head_12 =
      (ErlangTuple
         [(ErlangAtom "baz"),
          (ErlangCons (ErlangAtom "int") ErlangEmptyList)])
  in let
    head_19 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons (ErlangInt (DBI.fromInt 1)) ErlangEmptyList)])
  in let
    head_28 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_31 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_25 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons head_28 (ErlangCons head_31 ErlangEmptyList))])
  in let
    head_35 = (ErlangTuple [(ErlangAtom "baz"), ErlangEmptyList])
  in let
    fun_40 =
      (ErlangFun 0
         let
           lambda_41 [] =
             let   
               arg_45 =
                 (erlps__serialize__2
                    [(ErlangCons head_0
                        (ErlangCons head_6
                           (ErlangCons head_12 ErlangEmptyList))),
                     (ErlangCons head_19
                        (ErlangCons head_25
                           (ErlangCons head_35 ErlangEmptyList)))])
             in let
               case_43 =
                 (erlps__deserialize__2
                    [(ErlangCons head_0
                        (ErlangCons head_6
                           (ErlangCons head_12 ErlangEmptyList))),
                     arg_45])
             in
               case case_43 of
                 __x_48 | (__x_48 ==
                             (ErlangCons head_19
                                (ErlangCons head_25
                                   (ErlangCons head_35 ErlangEmptyList)))) ->
                   (ErlangAtom "ok")
                 __v_49 ->
                   let   
                     head_53 =
                       (ErlangTuple
                          [(ErlangAtom "module"),
                           (ErlangAtom "aeser_chain_objects_tests")])
                   in let
                     head_57 =
                       (ErlangTuple
                          [(ErlangAtom "line"), (ErlangInt (DBI.fromInt 28))])
                   in let
                     tup_el_63 =
                       (make_string
                          "deserialize ( Template , serialize ( Template , Values ) )")
                   in let
                     head_61 =
                       (ErlangTuple [(ErlangAtom "expression"), tup_el_63])
                   in let
                     head_65 =
                       (ErlangTuple
                          [(ErlangAtom "expected"),
                           (ErlangCons head_19
                              (ErlangCons head_25
                                 (ErlangCons head_35 ErlangEmptyList)))])
                   in let head_69 = (ErlangTuple [(ErlangAtom "value"), __v_49])
                   in let
                     arg_50 =
                       (ErlangTuple
                          [(ErlangAtom "assertEqual"),
                           (ErlangCons head_53
                              (ErlangCons head_57
                                 (ErlangCons head_61
                                    (ErlangCons head_65
                                       (ErlangCons head_69
                                          ErlangEmptyList)))))])
                   in (BIF.erlang__error__1 [arg_50])
                 something_else -> (EXC.case_clause something_else)
           lambda_41 [] = (EXC.function_clause unit)
           lambda_41 args = (EXC.badarity (ErlangFun 0 lambda_41) args)
         in lambda_41)
  in (BIF.erlang__apply__2 [fun_40, ErlangEmptyList])
erlps__list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_fail_test__0 :: ErlangFun
erlps__list_fail_test__0 [] =
  let   
    head_0 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons (ErlangAtom "int") ErlangEmptyList)])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons (ErlangAtom "binary") ErlangEmptyList)])
  in let
    head_13 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons (ErlangInt (DBI.fromInt 1)) ErlangEmptyList)])
  in let
    head_24 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_19 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons (ErlangInt (DBI.fromInt 2))
             (ErlangCons head_24 ErlangEmptyList))])
  in let
    fun_29 =
      (ErlangFun 0
         let
           lambda_30 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   (erlps__serialize__2
                      [(ErlangCons head_0 (ErlangCons head_6 ErlangEmptyList)),
                       (ErlangCons head_13
                          (ErlangCons head_19 ErlangEmptyList))]))
                (\ of_33 ->
                   case of_33 of
                     __v_35 ->
                       let   
                         head_39 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_43 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 33))])
                       in let
                         tup_el_49 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_47 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_49])
                       in let lop_54 = (make_string "{ ")
                       in let lop_56 = (make_string "error")
                       in let lop_58 = (make_string " , ")
                       in let
                         lop_60 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_61 = (make_string " , [...] }")
                       in let rop_59 = (BIF.erlang__op_append [lop_60, rop_61])
                       in let rop_57 = (BIF.erlang__op_append [lop_58, rop_59])
                       in let rop_55 = (BIF.erlang__op_append [lop_56, rop_57])
                       in let
                         tup_el_53 = (BIF.erlang__op_append [lop_54, rop_55])
                       in let
                         head_51 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_53])
                       in let
                         head_63 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_35])
                       in let
                         arg_36 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_39
                                  (ErlangCons head_43
                                     (ErlangCons head_47
                                        (ErlangCons head_51
                                           (ErlangCons head_63
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_36])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_34 ->
                   case ex_34 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_field"),
                                                 _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_67, __t_68, __s_69]) ->
                       let   
                         head_73 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_77 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 33))])
                       in let
                         tup_el_83 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_81 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_83])
                       in let lop_88 = (make_string "{ ")
                       in let lop_90 = (make_string "error")
                       in let lop_92 = (make_string " , ")
                       in let
                         lop_94 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_95 = (make_string " , [...] }")
                       in let rop_93 = (BIF.erlang__op_append [lop_94, rop_95])
                       in let rop_91 = (BIF.erlang__op_append [lop_92, rop_93])
                       in let rop_89 = (BIF.erlang__op_append [lop_90, rop_91])
                       in let
                         tup_el_87 = (BIF.erlang__op_append [lop_88, rop_89])
                       in let
                         head_85 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_87])
                       in let tup_el_99 = (ErlangTuple [__c_67, __t_68, __s_69])
                       in let
                         head_97 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_99])
                       in let
                         arg_70 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_73
                                  (ErlangCons head_77
                                     (ErlangCons head_81
                                        (ErlangCons head_85
                                           (ErlangCons head_97
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_70])
                     ex_34 -> (EXC.raise ex_34)))
           lambda_30 [] = (EXC.function_clause unit)
           lambda_30 args = (EXC.badarity (ErlangFun 0 lambda_30) args)
         in lambda_30)
  in (BIF.erlang__apply__2 [fun_29, ErlangEmptyList])
erlps__list_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_list_test__0 :: ErlangFun
erlps__deep_list_test__0 [] =
  let   
    head_0 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons (ErlangCons (ErlangAtom "int") ErlangEmptyList)
             ErlangEmptyList)])
  in let
    head_8 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons
             (ErlangCons
                (ErlangCons
                   (ErlangCons
                      (ErlangCons (ErlangAtom "binary") ErlangEmptyList)
                      ErlangEmptyList)
                   ErlangEmptyList)
                ErlangEmptyList)
             ErlangEmptyList)])
  in let
    head_23 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons
             (ErlangCons (ErlangInt (DBI.fromInt 1)) ErlangEmptyList)
             ErlangEmptyList)])
  in let
    head_38 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_31 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons
             (ErlangCons
                (ErlangCons
                   (ErlangCons (ErlangCons head_38 ErlangEmptyList)
                      ErlangEmptyList)
                   ErlangEmptyList)
                ErlangEmptyList)
             ErlangEmptyList)])
  in let
    fun_47 =
      (ErlangFun 0
         let
           lambda_48 [] =
             let   
               arg_52 =
                 (erlps__serialize__2
                    [(ErlangCons head_0 (ErlangCons head_8 ErlangEmptyList)),
                     (ErlangCons head_23 (ErlangCons head_31 ErlangEmptyList))])
             in let
               case_50 =
                 (erlps__deserialize__2
                    [(ErlangCons head_0 (ErlangCons head_8 ErlangEmptyList)),
                     arg_52])
             in
               case case_50 of
                 __x_55 | (__x_55 ==
                             (ErlangCons head_23
                                (ErlangCons head_31 ErlangEmptyList))) ->
                   (ErlangAtom "ok")
                 __v_56 ->
                   let   
                     head_60 =
                       (ErlangTuple
                          [(ErlangAtom "module"),
                           (ErlangAtom "aeser_chain_objects_tests")])
                   in let
                     head_64 =
                       (ErlangTuple
                          [(ErlangAtom "line"), (ErlangInt (DBI.fromInt 38))])
                   in let
                     tup_el_70 =
                       (make_string
                          "deserialize ( Template , serialize ( Template , Values ) )")
                   in let
                     head_68 =
                       (ErlangTuple [(ErlangAtom "expression"), tup_el_70])
                   in let
                     head_72 =
                       (ErlangTuple
                          [(ErlangAtom "expected"),
                           (ErlangCons head_23
                              (ErlangCons head_31 ErlangEmptyList))])
                   in let head_76 = (ErlangTuple [(ErlangAtom "value"), __v_56])
                   in let
                     arg_57 =
                       (ErlangTuple
                          [(ErlangAtom "assertEqual"),
                           (ErlangCons head_60
                              (ErlangCons head_64
                                 (ErlangCons head_68
                                    (ErlangCons head_72
                                       (ErlangCons head_76
                                          ErlangEmptyList)))))])
                   in (BIF.erlang__error__1 [arg_57])
                 something_else -> (EXC.case_clause something_else)
           lambda_48 [] = (EXC.function_clause unit)
           lambda_48 args = (EXC.badarity (ErlangFun 0 lambda_48) args)
         in lambda_48)
  in (BIF.erlang__apply__2 [fun_47, ErlangEmptyList])
erlps__deep_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_list_fail_test__0 :: ErlangFun
erlps__deep_list_fail_test__0 [] =
  let   
    head_0 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons (ErlangCons (ErlangAtom "int") ErlangEmptyList)
             ErlangEmptyList)])
  in let
    head_8 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons
             (ErlangCons
                (ErlangCons
                   (ErlangCons
                      (ErlangCons (ErlangAtom "binary") ErlangEmptyList)
                      ErlangEmptyList)
                   ErlangEmptyList)
                ErlangEmptyList)
             ErlangEmptyList)])
  in let
    head_23 =
      (ErlangTuple
         [(ErlangAtom "foo"),
          (ErlangCons
             (ErlangCons (ErlangInt (DBI.fromInt 1)) ErlangEmptyList)
             ErlangEmptyList)])
  in let
    head_31 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons
             (ErlangCons
                (ErlangCons
                   (ErlangCons
                      (ErlangCons (ErlangInt (DBI.fromInt 2)) ErlangEmptyList)
                      ErlangEmptyList)
                   ErlangEmptyList)
                ErlangEmptyList)
             ErlangEmptyList)])
  in let
    fun_46 =
      (ErlangFun 0
         let
           lambda_47 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   (erlps__serialize__2
                      [(ErlangCons head_0 (ErlangCons head_8 ErlangEmptyList)),
                       (ErlangCons head_23
                          (ErlangCons head_31 ErlangEmptyList))]))
                (\ of_50 ->
                   case of_50 of
                     __v_52 ->
                       let   
                         head_56 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_60 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 43))])
                       in let
                         tup_el_66 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_64 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_66])
                       in let lop_71 = (make_string "{ ")
                       in let lop_73 = (make_string "error")
                       in let lop_75 = (make_string " , ")
                       in let
                         lop_77 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_78 = (make_string " , [...] }")
                       in let rop_76 = (BIF.erlang__op_append [lop_77, rop_78])
                       in let rop_74 = (BIF.erlang__op_append [lop_75, rop_76])
                       in let rop_72 = (BIF.erlang__op_append [lop_73, rop_74])
                       in let
                         tup_el_70 = (BIF.erlang__op_append [lop_71, rop_72])
                       in let
                         head_68 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_70])
                       in let
                         head_80 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_52])
                       in let
                         arg_53 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_56
                                  (ErlangCons head_60
                                     (ErlangCons head_64
                                        (ErlangCons head_68
                                           (ErlangCons head_80
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_53])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_51 ->
                   case ex_51 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_field"),
                                                 _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_84, __t_85, __s_86]) ->
                       let   
                         head_90 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_94 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 43))])
                       in let
                         tup_el_100 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_98 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_100])
                       in let lop_105 = (make_string "{ ")
                       in let lop_107 = (make_string "error")
                       in let lop_109 = (make_string " , ")
                       in let
                         lop_111 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_112 = (make_string " , [...] }")
                       in let
                         rop_110 = (BIF.erlang__op_append [lop_111, rop_112])
                       in let
                         rop_108 = (BIF.erlang__op_append [lop_109, rop_110])
                       in let
                         rop_106 = (BIF.erlang__op_append [lop_107, rop_108])
                       in let
                         tup_el_104 = (BIF.erlang__op_append [lop_105, rop_106])
                       in let
                         head_102 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_104])
                       in let
                         tup_el_116 = (ErlangTuple [__c_84, __t_85, __s_86])
                       in let
                         head_114 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_116])
                       in let
                         arg_87 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_90
                                  (ErlangCons head_94
                                     (ErlangCons head_98
                                        (ErlangCons head_102
                                           (ErlangCons head_114
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_87])
                     ex_51 -> (EXC.raise ex_51)))
           lambda_47 [] = (EXC.function_clause unit)
           lambda_47 args = (EXC.badarity (ErlangFun 0 lambda_47) args)
         in lambda_47)
  in (BIF.erlang__apply__2 [fun_46, ErlangEmptyList])
erlps__deep_list_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__array_test__0 :: ErlangFun
erlps__array_test__0 [] =
  let   
    tup_el_2 =
      (ErlangTuple [(ErlangAtom "int"), (ErlangAtom "binary")])
  in let head_0 = (ErlangTuple [(ErlangAtom "foo"), tup_el_2])
  in let
    head_9 = (ErlangTuple [(ErlangAtom "int"), (ErlangAtom "int")])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "bar"), (ErlangCons head_9 ErlangEmptyList)])
  in let tup_el_16 = (ErlangTuple [(ErlangAtom "int")])
  in let head_14 = (ErlangTuple [(ErlangAtom "baz"), tup_el_16])
  in let
    tup_el_24 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 102))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tup_el_22 =
      (ErlangTuple [(ErlangInt (DBI.fromInt 1)), tup_el_24])
  in let head_20 = (ErlangTuple [(ErlangAtom "foo"), tup_el_22])
  in let
    head_32 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 2))])
  in let
    head_36 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 3)), (ErlangInt (DBI.fromInt 4))])
  in let
    head_40 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 5)), (ErlangInt (DBI.fromInt 6))])
  in let
    head_29 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons head_32
             (ErlangCons head_36 (ErlangCons head_40 ErlangEmptyList)))])
  in let tup_el_47 = (ErlangTuple [(ErlangInt (DBI.fromInt 1))])
  in let head_45 = (ErlangTuple [(ErlangAtom "baz"), tup_el_47])
  in let
    fun_51 =
      (ErlangFun 0
         let
           lambda_52 [] =
             let   
               arg_56 =
                 (erlps__serialize__2
                    [(ErlangCons head_0
                        (ErlangCons head_6
                           (ErlangCons head_14 ErlangEmptyList))),
                     (ErlangCons head_20
                        (ErlangCons head_29
                           (ErlangCons head_45 ErlangEmptyList)))])
             in let
               case_54 =
                 (erlps__deserialize__2
                    [(ErlangCons head_0
                        (ErlangCons head_6
                           (ErlangCons head_14 ErlangEmptyList))),
                     arg_56])
             in
               case case_54 of
                 __x_59 | (__x_59 ==
                             (ErlangCons head_20
                                (ErlangCons head_29
                                   (ErlangCons head_45 ErlangEmptyList)))) ->
                   (ErlangAtom "ok")
                 __v_60 ->
                   let   
                     head_64 =
                       (ErlangTuple
                          [(ErlangAtom "module"),
                           (ErlangAtom "aeser_chain_objects_tests")])
                   in let
                     head_68 =
                       (ErlangTuple
                          [(ErlangAtom "line"), (ErlangInt (DBI.fromInt 48))])
                   in let
                     tup_el_74 =
                       (make_string
                          "deserialize ( Template , serialize ( Template , Values ) )")
                   in let
                     head_72 =
                       (ErlangTuple [(ErlangAtom "expression"), tup_el_74])
                   in let
                     head_76 =
                       (ErlangTuple
                          [(ErlangAtom "expected"),
                           (ErlangCons head_20
                              (ErlangCons head_29
                                 (ErlangCons head_45 ErlangEmptyList)))])
                   in let head_80 = (ErlangTuple [(ErlangAtom "value"), __v_60])
                   in let
                     arg_61 =
                       (ErlangTuple
                          [(ErlangAtom "assertEqual"),
                           (ErlangCons head_64
                              (ErlangCons head_68
                                 (ErlangCons head_72
                                    (ErlangCons head_76
                                       (ErlangCons head_80
                                          ErlangEmptyList)))))])
                   in (BIF.erlang__error__1 [arg_61])
                 something_else -> (EXC.case_clause something_else)
           lambda_52 [] = (EXC.function_clause unit)
           lambda_52 args = (EXC.badarity (ErlangFun 0 lambda_52) args)
         in lambda_52)
  in (BIF.erlang__apply__2 [fun_51, ErlangEmptyList])
erlps__array_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__array_fail_test__0 :: ErlangFun
erlps__array_fail_test__0 [] =
  let   
    tup_el_2 =
      (ErlangTuple [(ErlangAtom "int"), (ErlangAtom "binary")])
  in let head_0 = (ErlangTuple [(ErlangAtom "foo"), tup_el_2])
  in let
    head_9 = (ErlangTuple [(ErlangAtom "int"), (ErlangAtom "int")])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "bar"), (ErlangCons head_9 ErlangEmptyList)])
  in let tup_el_16 = (ErlangTuple [(ErlangAtom "int")])
  in let head_14 = (ErlangTuple [(ErlangAtom "baz"), tup_el_16])
  in let
    tup_el_24 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 102))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tup_el_22 =
      (ErlangTuple [(ErlangInt (DBI.fromInt 1)), tup_el_24])
  in let head_20 = (ErlangTuple [(ErlangAtom "foo"), tup_el_22])
  in let
    head_32 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 2))])
  in let
    head_36 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 3)), (ErlangInt (DBI.fromInt 4))])
  in let
    head_40 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 5)), (ErlangInt (DBI.fromInt 6))])
  in let
    head_29 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons head_32
             (ErlangCons head_36 (ErlangCons head_40 ErlangEmptyList)))])
  in let
    tup_el_47 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 1))])
  in let head_45 = (ErlangTuple [(ErlangAtom "baz"), tup_el_47])
  in let
    fun_52 =
      (ErlangFun 0
         let
           lambda_53 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   (erlps__serialize__2
                      [(ErlangCons head_0
                          (ErlangCons head_6
                             (ErlangCons head_14 ErlangEmptyList))),
                       (ErlangCons head_20
                          (ErlangCons head_29
                             (ErlangCons head_45 ErlangEmptyList)))]))
                (\ of_56 ->
                   case of_56 of
                     __v_58 ->
                       let   
                         head_62 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_66 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 53))])
                       in let
                         tup_el_72 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_70 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_72])
                       in let lop_77 = (make_string "{ ")
                       in let lop_79 = (make_string "error")
                       in let lop_81 = (make_string " , ")
                       in let
                         lop_83 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_84 = (make_string " , [...] }")
                       in let rop_82 = (BIF.erlang__op_append [lop_83, rop_84])
                       in let rop_80 = (BIF.erlang__op_append [lop_81, rop_82])
                       in let rop_78 = (BIF.erlang__op_append [lop_79, rop_80])
                       in let
                         tup_el_76 = (BIF.erlang__op_append [lop_77, rop_78])
                       in let
                         head_74 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_76])
                       in let
                         head_86 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_58])
                       in let
                         arg_59 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_62
                                  (ErlangCons head_66
                                     (ErlangCons head_70
                                        (ErlangCons head_74
                                           (ErlangCons head_86
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_59])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_57 ->
                   case ex_57 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_field"),
                                                 _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_90, __t_91, __s_92]) ->
                       let   
                         head_96 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_100 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 53))])
                       in let
                         tup_el_106 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_104 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_106])
                       in let lop_111 = (make_string "{ ")
                       in let lop_113 = (make_string "error")
                       in let lop_115 = (make_string " , ")
                       in let
                         lop_117 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_118 = (make_string " , [...] }")
                       in let
                         rop_116 = (BIF.erlang__op_append [lop_117, rop_118])
                       in let
                         rop_114 = (BIF.erlang__op_append [lop_115, rop_116])
                       in let
                         rop_112 = (BIF.erlang__op_append [lop_113, rop_114])
                       in let
                         tup_el_110 = (BIF.erlang__op_append [lop_111, rop_112])
                       in let
                         head_108 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_110])
                       in let
                         tup_el_122 = (ErlangTuple [__c_90, __t_91, __s_92])
                       in let
                         head_120 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_122])
                       in let
                         arg_93 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_96
                                  (ErlangCons head_100
                                     (ErlangCons head_104
                                        (ErlangCons head_108
                                           (ErlangCons head_120
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_93])
                     ex_57 -> (EXC.raise ex_57)))
           lambda_53 [] = (EXC.function_clause unit)
           lambda_53 args = (EXC.badarity (ErlangFun 0 lambda_53) args)
         in lambda_53)
  in (BIF.erlang__apply__2 [fun_52, ErlangEmptyList])
erlps__array_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_array_test__0 :: ErlangFun
erlps__deep_array_test__0 [] =
  let   
    tup_el_3 =
      (ErlangTuple [(ErlangAtom "int"), (ErlangAtom "binary")])
  in let tup_el_2 = (ErlangTuple [tup_el_3])
  in let head_0 = (ErlangTuple [(ErlangAtom "foo"), tup_el_2])
  in let tup_el_11 = (ErlangTuple [(ErlangAtom "int")])
  in let head_10 = (ErlangTuple [tup_el_11, (ErlangAtom "int")])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "bar"), (ErlangCons head_10 ErlangEmptyList)])
  in let tup_el_19 = (ErlangTuple [(ErlangAtom "int")])
  in let tup_el_18 = (ErlangTuple [tup_el_19])
  in let head_16 = (ErlangTuple [(ErlangAtom "baz"), tup_el_18])
  in let
    tup_el_28 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 102))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tup_el_26 =
      (ErlangTuple [(ErlangInt (DBI.fromInt 1)), tup_el_28])
  in let tup_el_25 = (ErlangTuple [tup_el_26])
  in let head_23 = (ErlangTuple [(ErlangAtom "foo"), tup_el_25])
  in let tup_el_37 = (ErlangTuple [(ErlangInt (DBI.fromInt 1))])
  in let
    head_36 = (ErlangTuple [tup_el_37, (ErlangInt (DBI.fromInt 2))])
  in let tup_el_42 = (ErlangTuple [(ErlangInt (DBI.fromInt 3))])
  in let
    head_41 = (ErlangTuple [tup_el_42, (ErlangInt (DBI.fromInt 4))])
  in let tup_el_47 = (ErlangTuple [(ErlangInt (DBI.fromInt 5))])
  in let
    head_46 = (ErlangTuple [tup_el_47, (ErlangInt (DBI.fromInt 6))])
  in let
    head_33 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons head_36
             (ErlangCons head_41 (ErlangCons head_46 ErlangEmptyList)))])
  in let tup_el_55 = (ErlangTuple [(ErlangInt (DBI.fromInt 1))])
  in let tup_el_54 = (ErlangTuple [tup_el_55])
  in let head_52 = (ErlangTuple [(ErlangAtom "baz"), tup_el_54])
  in let
    fun_59 =
      (ErlangFun 0
         let
           lambda_60 [] =
             let   
               arg_64 =
                 (erlps__serialize__2
                    [(ErlangCons head_0
                        (ErlangCons head_7
                           (ErlangCons head_16 ErlangEmptyList))),
                     (ErlangCons head_23
                        (ErlangCons head_33
                           (ErlangCons head_52 ErlangEmptyList)))])
             in let
               case_62 =
                 (erlps__deserialize__2
                    [(ErlangCons head_0
                        (ErlangCons head_7
                           (ErlangCons head_16 ErlangEmptyList))),
                     arg_64])
             in
               case case_62 of
                 __x_67 | (__x_67 ==
                             (ErlangCons head_23
                                (ErlangCons head_33
                                   (ErlangCons head_52 ErlangEmptyList)))) ->
                   (ErlangAtom "ok")
                 __v_68 ->
                   let   
                     head_72 =
                       (ErlangTuple
                          [(ErlangAtom "module"),
                           (ErlangAtom "aeser_chain_objects_tests")])
                   in let
                     head_76 =
                       (ErlangTuple
                          [(ErlangAtom "line"), (ErlangInt (DBI.fromInt 58))])
                   in let
                     tup_el_82 =
                       (make_string
                          "deserialize ( Template , serialize ( Template , Values ) )")
                   in let
                     head_80 =
                       (ErlangTuple [(ErlangAtom "expression"), tup_el_82])
                   in let
                     head_84 =
                       (ErlangTuple
                          [(ErlangAtom "expected"),
                           (ErlangCons head_23
                              (ErlangCons head_33
                                 (ErlangCons head_52 ErlangEmptyList)))])
                   in let head_88 = (ErlangTuple [(ErlangAtom "value"), __v_68])
                   in let
                     arg_69 =
                       (ErlangTuple
                          [(ErlangAtom "assertEqual"),
                           (ErlangCons head_72
                              (ErlangCons head_76
                                 (ErlangCons head_80
                                    (ErlangCons head_84
                                       (ErlangCons head_88
                                          ErlangEmptyList)))))])
                   in (BIF.erlang__error__1 [arg_69])
                 something_else -> (EXC.case_clause something_else)
           lambda_60 [] = (EXC.function_clause unit)
           lambda_60 args = (EXC.badarity (ErlangFun 0 lambda_60) args)
         in lambda_60)
  in (BIF.erlang__apply__2 [fun_59, ErlangEmptyList])
erlps__deep_array_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_array_fail_test__0 :: ErlangFun
erlps__deep_array_fail_test__0 [] =
  let   
    tup_el_3 =
      (ErlangTuple [(ErlangAtom "int"), (ErlangAtom "binary")])
  in let tup_el_2 = (ErlangTuple [tup_el_3])
  in let head_0 = (ErlangTuple [(ErlangAtom "foo"), tup_el_2])
  in let tup_el_11 = (ErlangTuple [(ErlangAtom "int")])
  in let head_10 = (ErlangTuple [tup_el_11, (ErlangAtom "int")])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "bar"), (ErlangCons head_10 ErlangEmptyList)])
  in let tup_el_19 = (ErlangTuple [(ErlangAtom "binary")])
  in let tup_el_18 = (ErlangTuple [tup_el_19])
  in let head_16 = (ErlangTuple [(ErlangAtom "baz"), tup_el_18])
  in let
    tup_el_28 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 102))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 111))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tup_el_26 =
      (ErlangTuple [(ErlangInt (DBI.fromInt 1)), tup_el_28])
  in let tup_el_25 = (ErlangTuple [tup_el_26])
  in let head_23 = (ErlangTuple [(ErlangAtom "foo"), tup_el_25])
  in let tup_el_37 = (ErlangTuple [(ErlangInt (DBI.fromInt 1))])
  in let
    head_36 = (ErlangTuple [tup_el_37, (ErlangInt (DBI.fromInt 2))])
  in let tup_el_42 = (ErlangTuple [(ErlangInt (DBI.fromInt 3))])
  in let
    head_41 = (ErlangTuple [tup_el_42, (ErlangInt (DBI.fromInt 4))])
  in let tup_el_47 = (ErlangTuple [(ErlangInt (DBI.fromInt 5))])
  in let
    head_46 = (ErlangTuple [tup_el_47, (ErlangInt (DBI.fromInt 6))])
  in let
    head_33 =
      (ErlangTuple
         [(ErlangAtom "bar"),
          (ErlangCons head_36
             (ErlangCons head_41 (ErlangCons head_46 ErlangEmptyList)))])
  in let tup_el_55 = (ErlangTuple [(ErlangInt (DBI.fromInt 1))])
  in let tup_el_54 = (ErlangTuple [tup_el_55])
  in let head_52 = (ErlangTuple [(ErlangAtom "baz"), tup_el_54])
  in let
    fun_59 =
      (ErlangFun 0
         let
           lambda_60 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   (erlps__serialize__2
                      [(ErlangCons head_0
                          (ErlangCons head_7
                             (ErlangCons head_16 ErlangEmptyList))),
                       (ErlangCons head_23
                          (ErlangCons head_33
                             (ErlangCons head_52 ErlangEmptyList)))]))
                (\ of_63 ->
                   case of_63 of
                     __v_65 ->
                       let   
                         head_69 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_73 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 63))])
                       in let
                         tup_el_79 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_77 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_79])
                       in let lop_84 = (make_string "{ ")
                       in let lop_86 = (make_string "error")
                       in let lop_88 = (make_string " , ")
                       in let
                         lop_90 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_91 = (make_string " , [...] }")
                       in let rop_89 = (BIF.erlang__op_append [lop_90, rop_91])
                       in let rop_87 = (BIF.erlang__op_append [lop_88, rop_89])
                       in let rop_85 = (BIF.erlang__op_append [lop_86, rop_87])
                       in let
                         tup_el_83 = (BIF.erlang__op_append [lop_84, rop_85])
                       in let
                         head_81 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_83])
                       in let
                         head_93 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_65])
                       in let
                         arg_66 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_69
                                  (ErlangCons head_73
                                     (ErlangCons head_77
                                        (ErlangCons head_81
                                           (ErlangCons head_93
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_66])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_64 ->
                   case ex_64 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_field"),
                                                 _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_97, __t_98, __s_99]) ->
                       let   
                         head_103 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_107 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 63))])
                       in let
                         tup_el_113 =
                           (make_string "serialize ( Template , Values )")
                       in let
                         head_111 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_113])
                       in let lop_118 = (make_string "{ ")
                       in let lop_120 = (make_string "error")
                       in let lop_122 = (make_string " , ")
                       in let
                         lop_124 =
                           (make_string "{ illegal_field , _ , _ , _ , _ , _ }")
                       in let rop_125 = (make_string " , [...] }")
                       in let
                         rop_123 = (BIF.erlang__op_append [lop_124, rop_125])
                       in let
                         rop_121 = (BIF.erlang__op_append [lop_122, rop_123])
                       in let
                         rop_119 = (BIF.erlang__op_append [lop_120, rop_121])
                       in let
                         tup_el_117 = (BIF.erlang__op_append [lop_118, rop_119])
                       in let
                         head_115 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_117])
                       in let
                         tup_el_129 = (ErlangTuple [__c_97, __t_98, __s_99])
                       in let
                         head_127 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_129])
                       in let
                         arg_100 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_103
                                  (ErlangCons head_107
                                     (ErlangCons head_111
                                        (ErlangCons head_115
                                           (ErlangCons head_127
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_100])
                     ex_64 -> (EXC.raise ex_64)))
           lambda_60 [] = (EXC.function_clause unit)
           lambda_60 args = (EXC.badarity (ErlangFun 0 lambda_60) args)
         in lambda_60)
  in (BIF.erlang__apply__2 [fun_59, ErlangEmptyList])
erlps__deep_array_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tag_fail_test__0 :: ErlangFun
erlps__tag_fail_test__0 [] =
  let   
    head_0 = (ErlangTuple [(ErlangAtom "foo"), (ErlangAtom "int")])
  in let
    head_4 =
      (ErlangTuple [(ErlangAtom "bar"), (ErlangAtom "binary")])
  in let
    head_9 =
      (ErlangTuple [(ErlangAtom "foo"), (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_15 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let head_13 = (ErlangTuple [(ErlangAtom "bar"), tup_el_15])
  in let
    fun_19 =
      (ErlangFun 0
         let
           lambda_20 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   let
                     arg_22 =
                       (erlps__serialize__2
                          [(ErlangCons head_0
                              (ErlangCons head_4 ErlangEmptyList)),
                           (ErlangCons head_9
                              (ErlangCons head_13 ErlangEmptyList))])
                   in
                     (erlps__deserialize__4
                        [(ErlangCons head_0
                            (ErlangCons head_4 ErlangEmptyList)),
                         arg_22, (ErlangAtom "signed_tx"),
                         (ErlangInt (DBI.fromInt 1))]))
                (\ of_27 ->
                   case of_27 of
                     __v_29 ->
                       let   
                         head_33 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_37 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 69))])
                       in let
                         tup_el_43 =
                           (make_string
                              "deserialize ( Template , serialize ( Template , Values ) , signed_tx , ? DEFAULT_VERSION )")
                       in let
                         head_41 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_43])
                       in let lop_48 = (make_string "{ ")
                       in let lop_50 = (make_string "error")
                       in let lop_52 = (make_string " , ")
                       in let
                         lop_54 =
                           (make_string
                              "{ illegal_serialization , _ , _ , _ , _ , _ , _ }")
                       in let rop_55 = (make_string " , [...] }")
                       in let rop_53 = (BIF.erlang__op_append [lop_54, rop_55])
                       in let rop_51 = (BIF.erlang__op_append [lop_52, rop_53])
                       in let rop_49 = (BIF.erlang__op_append [lop_50, rop_51])
                       in let
                         tup_el_47 = (BIF.erlang__op_append [lop_48, rop_49])
                       in let
                         head_45 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_47])
                       in let
                         head_57 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_29])
                       in let
                         arg_30 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_33
                                  (ErlangCons head_37
                                     (ErlangCons head_41
                                        (ErlangCons head_45
                                           (ErlangCons head_57
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_30])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_28 ->
                   case ex_28 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_serialization"),
                                                 _, _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_61, __t_62, __s_63]) ->
                       let   
                         head_67 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_71 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 68))])
                       in let
                         tup_el_77 =
                           (make_string
                              "deserialize ( Template , serialize ( Template , Values ) , signed_tx , ? DEFAULT_VERSION )")
                       in let
                         head_75 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_77])
                       in let lop_82 = (make_string "{ ")
                       in let lop_84 = (make_string "error")
                       in let lop_86 = (make_string " , ")
                       in let
                         lop_88 =
                           (make_string
                              "{ illegal_serialization , _ , _ , _ , _ , _ , _ }")
                       in let rop_89 = (make_string " , [...] }")
                       in let rop_87 = (BIF.erlang__op_append [lop_88, rop_89])
                       in let rop_85 = (BIF.erlang__op_append [lop_86, rop_87])
                       in let rop_83 = (BIF.erlang__op_append [lop_84, rop_85])
                       in let
                         tup_el_81 = (BIF.erlang__op_append [lop_82, rop_83])
                       in let
                         head_79 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_81])
                       in let tup_el_93 = (ErlangTuple [__c_61, __t_62, __s_63])
                       in let
                         head_91 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_93])
                       in let
                         arg_64 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_67
                                  (ErlangCons head_71
                                     (ErlangCons head_75
                                        (ErlangCons head_79
                                           (ErlangCons head_91
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_64])
                     ex_28 -> (EXC.raise ex_28)))
           lambda_20 [] = (EXC.function_clause unit)
           lambda_20 args = (EXC.badarity (ErlangFun 0 lambda_20) args)
         in lambda_20)
  in (BIF.erlang__apply__2 [fun_19, ErlangEmptyList])
erlps__tag_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vsn_fail_test__0 :: ErlangFun
erlps__vsn_fail_test__0 [] =
  let   
    head_0 = (ErlangTuple [(ErlangAtom "foo"), (ErlangAtom "int")])
  in let
    head_4 =
      (ErlangTuple [(ErlangAtom "bar"), (ErlangAtom "binary")])
  in let
    head_9 =
      (ErlangTuple [(ErlangAtom "foo"), (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_15 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 2))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let head_13 = (ErlangTuple [(ErlangAtom "bar"), tup_el_15])
  in let
    fun_19 =
      (ErlangFun 0
         let
           lambda_20 [] =
             (EXC.tryOfCatch
                (\ _ ->
                   let
                     arg_22 =
                       (erlps__serialize__2
                          [(ErlangCons head_0
                              (ErlangCons head_4 ErlangEmptyList)),
                           (ErlangCons head_9
                              (ErlangCons head_13 ErlangEmptyList))])
                   in
                     (erlps__deserialize__4
                        [(ErlangCons head_0
                            (ErlangCons head_4 ErlangEmptyList)),
                         arg_22, (ErlangAtom "account"),
                         (ErlangInt (DBI.fromInt 2))]))
                (\ of_27 ->
                   case of_27 of
                     __v_29 ->
                       let   
                         head_33 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_37 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 75))])
                       in let
                         tup_el_43 =
                           (make_string
                              "deserialize ( Template , serialize ( Template , Values ) , ? DEFAULT_TAG , 2 )")
                       in let
                         head_41 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_43])
                       in let lop_48 = (make_string "{ ")
                       in let lop_50 = (make_string "error")
                       in let lop_52 = (make_string " , ")
                       in let
                         lop_54 =
                           (make_string
                              "{ illegal_serialization , _ , _ , _ , _ , _ , _ }")
                       in let rop_55 = (make_string " , [...] }")
                       in let rop_53 = (BIF.erlang__op_append [lop_54, rop_55])
                       in let rop_51 = (BIF.erlang__op_append [lop_52, rop_53])
                       in let rop_49 = (BIF.erlang__op_append [lop_50, rop_51])
                       in let
                         tup_el_47 = (BIF.erlang__op_append [lop_48, rop_49])
                       in let
                         head_45 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_47])
                       in let
                         head_57 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_success"), __v_29])
                       in let
                         arg_30 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_33
                                  (ErlangCons head_37
                                     (ErlangCons head_41
                                        (ErlangCons head_45
                                           (ErlangCons head_57
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_30])
                     something_else -> (EXC.try_clause something_else))
                (\ ex_28 ->
                   case ex_28 of
                     (ErlangTuple [(ErlangAtom "error"),
                                   (ErlangTuple [(ErlangAtom "illegal_serialization"),
                                                 _, _, _, _, _, _]),
                                   _]) ->
                       (ErlangAtom "ok")
                     (ErlangTuple [__c_61, __t_62, __s_63]) ->
                       let   
                         head_67 =
                           (ErlangTuple
                              [(ErlangAtom "module"),
                               (ErlangAtom "aeser_chain_objects_tests")])
                       in let
                         head_71 =
                           (ErlangTuple
                              [(ErlangAtom "line"),
                               (ErlangInt (DBI.fromInt 74))])
                       in let
                         tup_el_77 =
                           (make_string
                              "deserialize ( Template , serialize ( Template , Values ) , ? DEFAULT_TAG , 2 )")
                       in let
                         head_75 =
                           (ErlangTuple [(ErlangAtom "expression"), tup_el_77])
                       in let lop_82 = (make_string "{ ")
                       in let lop_84 = (make_string "error")
                       in let lop_86 = (make_string " , ")
                       in let
                         lop_88 =
                           (make_string
                              "{ illegal_serialization , _ , _ , _ , _ , _ , _ }")
                       in let rop_89 = (make_string " , [...] }")
                       in let rop_87 = (BIF.erlang__op_append [lop_88, rop_89])
                       in let rop_85 = (BIF.erlang__op_append [lop_86, rop_87])
                       in let rop_83 = (BIF.erlang__op_append [lop_84, rop_85])
                       in let
                         tup_el_81 = (BIF.erlang__op_append [lop_82, rop_83])
                       in let
                         head_79 =
                           (ErlangTuple [(ErlangAtom "pattern"), tup_el_81])
                       in let tup_el_93 = (ErlangTuple [__c_61, __t_62, __s_63])
                       in let
                         head_91 =
                           (ErlangTuple
                              [(ErlangAtom "unexpected_exception"), tup_el_93])
                       in let
                         arg_64 =
                           (ErlangTuple
                              [(ErlangAtom "assertException"),
                               (ErlangCons head_67
                                  (ErlangCons head_71
                                     (ErlangCons head_75
                                        (ErlangCons head_79
                                           (ErlangCons head_91
                                              ErlangEmptyList)))))])
                       in (BIF.erlang__error__1 [arg_64])
                     ex_28 -> (EXC.raise ex_28)))
           lambda_20 [] = (EXC.function_clause unit)
           lambda_20 args = (EXC.badarity (ErlangFun 0 lambda_20) args)
         in lambda_20)
  in (BIF.erlang__apply__2 [fun_19, ErlangEmptyList])
erlps__vsn_fail_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize__2 :: ErlangFun
erlps__deserialize__2 [template_0, bin_1] =
  (erlps__deserialize__4
     [template_0, bin_1, (ErlangAtom "account"),
      (ErlangInt (DBI.fromInt 1))])
erlps__deserialize__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__deserialize__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deserialize__4 :: ErlangFun
erlps__deserialize__4 [template_0, bin_1, tag_2, vsn_3] =
  (BIF.do_remote_fun_call "Aeser.Chain.Objects"
     "erlps__deserialize__4" [tag_2, vsn_3, template_0, bin_1])
erlps__deserialize__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__deserialize__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__serialize__2 :: ErlangFun
erlps__serialize__2 [template_0, bin_1] =
  (erlps__serialize__4
     [template_0, bin_1, (ErlangAtom "account"),
      (ErlangInt (DBI.fromInt 1))])
erlps__serialize__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__serialize__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__serialize__4 :: ErlangFun
erlps__serialize__4 [template_0, bin_1, tag_2, vsn_3] =
  (BIF.do_remote_fun_call "Aeser.Chain.Objects"
     "erlps__serialize__4" [tag_2, vsn_3, template_0, bin_1])
erlps__serialize__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__serialize__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  (BIF.do_remote_fun_call "Eunit" "erlps__test__1"
     [(ErlangAtom "aeser_chain_objects_tests")])
erlps__test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)