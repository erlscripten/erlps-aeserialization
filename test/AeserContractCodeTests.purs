module Aeser.Contract.Code.Tests(erlps__test__0,
                                 erlps__vsn_1_test__0, erlps__vsn_2_test__0,
                                 erlps__vsn_3_test__0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__vsn_1_test__0 :: ErlangFun
erlps__vsn_1_test__0 [] =
  let   
    val_5 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 85))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 89))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 32))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 67))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 79))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 69))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let tup_el_18 = (ErlangBinary (BIN.concat []))
  in let tup_el_19 = (ErlangBinary (BIN.concat []))
  in let tup_el_20 = (ErlangBinary (BIN.concat []))
  in let tup_el_21 = (ErlangBinary (BIN.concat []))
  in let
    head_17 =
      (ErlangTuple [tup_el_18, tup_el_19, tup_el_20, tup_el_21])
  in let val_23 = (H.make_string "contract Foo = ...")
  in let
    arg_1 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "byte_code") val_5),
             (Tup.Tuple (ErlangAtom "type_info")
                (ErlangCons head_17 ErlangEmptyList)),
             (Tup.Tuple (ErlangAtom "contract_source") val_23)]))
  in let
    arg_0 =
      (BIF.do_remote_fun_call "Aeser.Contract.Code"
         "erlps__serialize__2" [arg_1, (ErlangInt (DBI.fromInt 1))])
  in
    (BIF.do_remote_fun_call "Aeser.Contract.Code"
       "erlps__deserialize__1" [arg_0])
erlps__vsn_1_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vsn_2_test__0 :: ErlangFun
erlps__vsn_2_test__0 [] =
  let   
    val_6 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 85))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 89))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 32))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 67))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 79))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 69))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let tup_el_19 = (ErlangBinary (BIN.concat []))
  in let tup_el_20 = (ErlangBinary (BIN.concat []))
  in let tup_el_21 = (ErlangBinary (BIN.concat []))
  in let tup_el_22 = (ErlangBinary (BIN.concat []))
  in let
    head_18 =
      (ErlangTuple [tup_el_19, tup_el_20, tup_el_21, tup_el_22])
  in let
    val_24 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 51))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 46))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 49))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 46))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 52))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    val_30 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 1))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 2))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 3))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 4))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    arg_1 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "byte_code") val_6),
             (Tup.Tuple (ErlangAtom "type_info")
                (ErlangCons head_18 ErlangEmptyList)),
             (Tup.Tuple (ErlangAtom "compiler_version") val_24),
             (Tup.Tuple (ErlangAtom "source_hash") val_30)]))
  in let
    arg_0 =
      (BIF.do_remote_fun_call "Aeser.Contract.Code"
         "erlps__serialize__2" [arg_1, (ErlangInt (DBI.fromInt 2))])
  in
    (BIF.do_remote_fun_call "Aeser.Contract.Code"
       "erlps__deserialize__1" [arg_0])
erlps__vsn_2_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vsn_3_test__0 :: ErlangFun
erlps__vsn_3_test__0 [] =
  let   
    val_7 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 85))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 77))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 89))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 32))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 67))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 79))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 68))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 69))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let tup_el_20 = (ErlangBinary (BIN.concat []))
  in let tup_el_21 = (ErlangBinary (BIN.concat []))
  in let tup_el_23 = (ErlangBinary (BIN.concat []))
  in let tup_el_24 = (ErlangBinary (BIN.concat []))
  in let
    head_19 =
      (ErlangTuple
         [tup_el_20, tup_el_21, (ErlangAtom "false"), tup_el_23,
          tup_el_24])
  in let
    val_26 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 51))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 46))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 49))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 46))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 52))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let val_32 = (H.make_string "contract Foo = ...")
  in let
    arg_1 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "byte_code") val_7),
             (Tup.Tuple (ErlangAtom "type_info")
                (ErlangCons head_19 ErlangEmptyList)),
             (Tup.Tuple (ErlangAtom "compiler_version") val_26),
             (Tup.Tuple (ErlangAtom "contract_source") val_32),
             (Tup.Tuple (ErlangAtom "payable") (ErlangAtom "true"))]))
  in let
    arg_0 =
      (BIF.do_remote_fun_call "Aeser.Contract.Code"
         "erlps__serialize__2" [arg_1, (ErlangInt (DBI.fromInt 3))])
  in
    (BIF.do_remote_fun_call "Aeser.Contract.Code"
       "erlps__deserialize__1" [arg_0])
erlps__vsn_3_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  (BIF.do_remote_fun_call "Eunit" "erlps__test__1"
     [(ErlangAtom "aeser_contract_code_tests")])
erlps__test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)