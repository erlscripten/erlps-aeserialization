module Aeser.Rlp.Tests(erlps__test__0,
                       erlps__rlp_one_byte_test__0,
                       erlps__rlp_another_one_byte_test__0,
                       erlps__rlp_zero_bytes_test__0,
                       erlps__rlp_two_bytes_test__0,
                       erlps__rlp_one_byte_size_bytes_test__0,
                       erlps__rlp_tagged_size_one_byte_bytes_test__0,
                       erlps__rlp_tagged_size_two_bytes_bytes_test__0,
                       erlps__rlp_zero_bytes_list_test__0,
                       erlps__rlp_one_byte_list_test__0,
                       erlps__rlp_byte_array_list_test__0,
                       erlps__rlp_byte_array_tagged_size_one_byte_list_test__0,
                       erlps__rlp_byte_array_tagged_size_two_bytes_list_test__0,
                       erlps__illegal_size_encoding_list_test__0,
                       erlps__illegal_size_encoding_byte_array_test__0) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__rlp_one_byte_test__0 :: ErlangFun
erlps__rlp_one_byte_test__0 [] =
  let   
    b_1 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    match_expr_4 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [b_1])
  in
    case match_expr_4 of
      b_3 | (b_3 == b_1) ->
        let
          match_final_5_7 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1" [b_1])
        in
          case match_final_5_7 of
            b_8 | (b_8 == b_1) -> match_final_5_7
            _ -> (EXC.badmatch match_final_5_7)
      _ -> (EXC.badmatch match_expr_4)
erlps__rlp_one_byte_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_another_one_byte_test__0 :: ErlangFun
erlps__rlp_another_one_byte_test__0 [] =
  let   
    b_1 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 127))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    match_expr_4 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [b_1])
  in
    case match_expr_4 of
      b_3 | (b_3 == b_1) ->
        let
          match_final_5_7 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1" [b_1])
        in
          case match_final_5_7 of
            b_8 | (b_8 == b_1) -> match_final_5_7
            _ -> (EXC.badmatch match_final_5_7)
      _ -> (EXC.badmatch match_expr_4)
erlps__rlp_another_one_byte_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_zero_bytes_test__0 :: ErlangFun
erlps__rlp_zero_bytes_test__0 [] =
  let    b_0 = (ErlangBinary (BIN.concat []))
  in let
    s_3 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 128)), (ErlangInt (DBI.fromInt 0))])
  in let
    match_final_4_6 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [b_0])
  in
    case match_final_4_6 of
      (ErlangBinary bin_c_7) | size_8 <- ((DBI.fromInt 8))
                             , (BIN.Ok s_10 bin_9) <-
                                 ((BIN.chop_int bin_c_7 size_8 1 BIN.Big
                                     BIN.Unsigned))
                             , (ErlangInt size_11) <- ((BIN.size bin_9))
                             , (BIN.Ok b_13 bin_12) <-
                                 ((BIN.chop_bin bin_9 size_11 8))
                             , (BIN.empty bin_12)
                             , (s_10 == s_3)
                             , (b_13 == b_0) ->
        match_final_4_6
      _ -> (EXC.badmatch match_final_4_6)
erlps__rlp_zero_bytes_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_two_bytes_test__0 :: ErlangFun
erlps__rlp_two_bytes_test__0 [] =
  let   
    b_1 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 128))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    s_4 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 128)), (ErlangInt (DBI.fromInt 1))])
  in let
    match_final_5_7 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [b_1])
  in
    case match_final_5_7 of
      (ErlangBinary bin_c_8) | size_9 <- ((DBI.fromInt 8))
                             , (BIN.Ok s_11 bin_10) <-
                                 ((BIN.chop_int bin_c_8 size_9 1 BIN.Big
                                     BIN.Unsigned))
                             , (ErlangInt size_12) <- ((BIN.size bin_10))
                             , (BIN.Ok b_14 bin_13) <-
                                 ((BIN.chop_bin bin_10 size_12 8))
                             , (BIN.empty bin_13)
                             , (s_11 == s_4)
                             , (b_14 == b_1) ->
        match_final_5_7
      _ -> (EXC.badmatch match_final_5_7)
erlps__rlp_two_bytes_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_one_byte_size_bytes_test__0 :: ErlangFun
erlps__rlp_one_byte_size_bytes_test__0 [] =
  let   
    s_3 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 128)), (ErlangInt (DBI.fromInt 55))])
  in let
    lc_src_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
         [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 55))])
  in let
    x_11 =
      (BIN.concat_erl
         (flmap
            (\ lc_8 ->
               case lc_8 of
                 x_7 ->
                   let
                     lc_ret_9 =
                       (ErlangBinary
                          (BIN.from_int x_7 (ErlangInt (DBI.fromInt 8)) 1
                             BIN.Big))
                   in (ErlangCons lc_ret_9 ErlangEmptyList)
                 _ -> ErlangEmptyList)
            lc_src_4))
  in let
    match_expr_20 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_11])
  in
    case match_expr_20 of
      (ErlangBinary bin_c_13) | size_14 <- ((DBI.fromInt 8))
                              , (BIN.Ok s_16 bin_15) <-
                                  ((BIN.chop_int bin_c_13 size_14 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_17) <- ((BIN.size bin_15))
                              , (BIN.Ok x_19 bin_18) <-
                                  ((BIN.chop_bin bin_15 size_17 8))
                              , (BIN.empty bin_18)
                              , (s_16 == s_3)
                              , (x_19 == x_11) ->
        let
          match_final_22_24 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_20])
        in
          case match_final_22_24 of
            x_25 | (x_25 == x_11) -> match_final_22_24
            _ -> (EXC.badmatch match_final_22_24)
      _ -> (EXC.badmatch match_expr_20)
erlps__rlp_one_byte_size_bytes_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_tagged_size_one_byte_bytes_test__0 :: ErlangFun
erlps__rlp_tagged_size_one_byte_bytes_test__0 [] =
  let   
    lop_1 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 128)), (ErlangInt (DBI.fromInt 55))])
  in let
    tag_5 =
      (BIF.erlang__op_plus [lop_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 56)), (ErlangInt (DBI.fromInt 42))])
  in let x_9 = (BIF.erlang__list_to_binary__1 [arg_6])
  in let s_11 = (BIF.erlang__byte_size__1 [x_9])
  in let
    match_expr_23 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_9])
  in
    case match_expr_23 of
      (ErlangBinary bin_c_13) | size_14 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_16 bin_15) <-
                                  ((BIN.chop_int bin_c_13 size_14 1 BIN.Big
                                      BIN.Unsigned))
                              , size_17 <- ((DBI.fromInt 8))
                              , (BIN.Ok s_19 bin_18) <-
                                  ((BIN.chop_int bin_15 size_17 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_20) <- ((BIN.size bin_18))
                              , (BIN.Ok x_22 bin_21) <-
                                  ((BIN.chop_bin bin_18 size_20 8))
                              , (BIN.empty bin_21)
                              , (tag_16 == tag_5)
                              , (s_19 == s_11)
                              , (x_22 == x_9) ->
        let
          match_final_25_27 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_23])
        in
          case match_final_25_27 of
            x_28 | (x_28 == x_9) -> match_final_25_27
            _ -> (EXC.badmatch match_final_25_27)
      _ -> (EXC.badmatch match_expr_23)
erlps__rlp_tagged_size_one_byte_bytes_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_tagged_size_two_bytes_bytes_test__0 :: ErlangFun
erlps__rlp_tagged_size_two_bytes_bytes_test__0 [] =
  let   
    lop_2 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 128)), (ErlangInt (DBI.fromInt 55))])
  in let
    tag_6 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 256)), (ErlangInt (DBI.fromInt 42))])
  in let x_10 = (BIF.erlang__list_to_binary__1 [arg_7])
  in let s_12 = (BIF.erlang__byte_size__1 [x_10])
  in let
    match_expr_24 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_10])
  in
    case match_expr_24 of
      (ErlangBinary bin_c_14) | size_15 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_17 bin_16) <-
                                  ((BIN.chop_int bin_c_14 size_15 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_18) <-
                                  ((ErlangInt (DBI.fromInt 2)))
                              , (BIN.Ok s_20 bin_19) <-
                                  ((BIN.chop_int bin_16 size_18 8 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_21) <- ((BIN.size bin_19))
                              , (BIN.Ok x_23 bin_22) <-
                                  ((BIN.chop_bin bin_19 size_21 8))
                              , (BIN.empty bin_22)
                              , (tag_17 == tag_6)
                              , (s_20 == s_12)
                              , (x_23 == x_10) ->
        let
          match_final_26_28 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_24])
        in
          case match_final_26_28 of
            x_29 | (x_29 == x_10) -> match_final_26_28
            _ -> (EXC.badmatch match_final_26_28)
      _ -> (EXC.badmatch match_expr_24)
erlps__rlp_tagged_size_two_bytes_bytes_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_zero_bytes_list_test__0 :: ErlangFun
erlps__rlp_zero_bytes_list_test__0 [] =
  let   
    tag_3 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 192)), (ErlangInt (DBI.fromInt 0))])
  in let
    match_expr_10 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1"
         [ErlangEmptyList])
  in
    case match_expr_10 of
      (ErlangBinary bin_c_6) | size_7 <- ((DBI.fromInt 8))
                             , (BIN.Ok tag_9 bin_8) <-
                                 ((BIN.chop_int bin_c_6 size_7 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_8)
                             , (tag_9 == tag_3) ->
        let
          match_final_12_14 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_10])
        in
          case match_final_12_14 of
            x_15 | (x_15 == ErlangEmptyList) -> match_final_12_14
            _ -> (EXC.badmatch match_final_12_14)
      _ -> (EXC.badmatch match_expr_10)
erlps__rlp_zero_bytes_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_one_byte_list_test__0 :: ErlangFun
erlps__rlp_one_byte_list_test__0 [] =
  let   
    tag_3 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 192)), (ErlangInt (DBI.fromInt 1))])
  in let
    arg_5 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    x_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 1)), arg_5])
  in let
    match_expr_16 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_7])
  in
    case match_expr_16 of
      (ErlangBinary bin_c_9) | size_10 <- ((DBI.fromInt 8))
                             , (BIN.Ok tag_12 bin_11) <-
                                 ((BIN.chop_int bin_c_9 size_10 1 BIN.Big
                                     BIN.Unsigned))
                             , size_13 <- ((DBI.fromInt 8))
                             , (BIN.Ok (ErlangInt num_15) bin_14) <-
                                 ((BIN.chop_int bin_11 size_13 1 BIN.Big
                                     BIN.Unsigned))
                             , ((ErlangInt num_15) ==
                                  (ErlangInt (DBI.fromInt 42)))
                             , (BIN.empty bin_14)
                             , (tag_12 == tag_3) ->
        let
          match_final_18_20 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_16])
        in
          case match_final_18_20 of
            x_21 | (x_21 == x_7) -> match_final_18_20
            _ -> (EXC.badmatch match_final_18_20)
      _ -> (EXC.badmatch match_expr_16)
erlps__rlp_one_byte_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_byte_array_list_test__0 :: ErlangFun
erlps__rlp_byte_array_list_test__0 [] =
  let   
    tag_3 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 192)), (ErlangInt (DBI.fromInt 55))])
  in let
    arg_5 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    x_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 55)), arg_5])
  in let y_9 = (BIF.erlang__list_to_binary__1 [x_7])
  in let
    match_expr_18 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_7])
  in
    case match_expr_18 of
      (ErlangBinary bin_c_11) | size_12 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_14 bin_13) <-
                                  ((BIN.chop_int bin_c_11 size_12 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_15) <- ((BIN.size bin_13))
                              , (BIN.Ok y_17 bin_16) <-
                                  ((BIN.chop_bin bin_13 size_15 8))
                              , (BIN.empty bin_16)
                              , (tag_14 == tag_3)
                              , (y_17 == y_9) ->
        let
          match_final_20_22 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_18])
        in
          case match_final_20_22 of
            x_23 | (x_23 == x_7) -> match_final_20_22
            _ -> (EXC.badmatch match_final_20_22)
      _ -> (EXC.badmatch match_expr_18)
erlps__rlp_byte_array_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_byte_array_tagged_size_one_byte_list_test__0 :: ErlangFun
erlps__rlp_byte_array_tagged_size_one_byte_list_test__0 [] =
  let   
    lop_2 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 192)), (ErlangInt (DBI.fromInt 55))])
  in let
    tag_6 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    x_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 56)), arg_8])
  in let y_12 = (BIF.erlang__list_to_binary__1 [x_10])
  in let s_14 = (BIF.erlang__byte_size__1 [y_12])
  in let
    match_expr_26 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_10])
  in
    case match_expr_26 of
      (ErlangBinary bin_c_16) | size_17 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_19 bin_18) <-
                                  ((BIN.chop_int bin_c_16 size_17 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_20) <-
                                  ((ErlangInt (DBI.fromInt 1)))
                              , (BIN.Ok s_22 bin_21) <-
                                  ((BIN.chop_int bin_18 size_20 8 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_23) <- ((BIN.size bin_21))
                              , (BIN.Ok y_25 bin_24) <-
                                  ((BIN.chop_bin bin_21 size_23 8))
                              , (BIN.empty bin_24)
                              , (tag_19 == tag_6)
                              , (s_22 == s_14)
                              , (y_25 == y_12) ->
        let
          match_final_28_30 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_26])
        in
          case match_final_28_30 of
            x_31 | (x_31 == x_10) -> match_final_28_30
            _ -> (EXC.badmatch match_final_28_30)
      _ -> (EXC.badmatch match_expr_26)
erlps__rlp_byte_array_tagged_size_one_byte_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rlp_byte_array_tagged_size_two_bytes_list_test__0 :: ErlangFun
erlps__rlp_byte_array_tagged_size_two_bytes_list_test__0 [] =
  let   
    lop_2 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 192)), (ErlangInt (DBI.fromInt 55))])
  in let
    tag_6 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    x_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 256)), arg_8])
  in let y_12 = (BIF.erlang__list_to_binary__1 [x_10])
  in let s_14 = (BIF.erlang__byte_size__1 [y_12])
  in let
    match_expr_26 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_10])
  in
    case match_expr_26 of
      (ErlangBinary bin_c_16) | size_17 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_19 bin_18) <-
                                  ((BIN.chop_int bin_c_16 size_17 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_20) <-
                                  ((ErlangInt (DBI.fromInt 2)))
                              , (BIN.Ok s_22 bin_21) <-
                                  ((BIN.chop_int bin_18 size_20 8 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_23) <- ((BIN.size bin_21))
                              , (BIN.Ok y_25 bin_24) <-
                                  ((BIN.chop_bin bin_21 size_23 8))
                              , (BIN.empty bin_24)
                              , (tag_19 == tag_6)
                              , (s_22 == s_14)
                              , (y_25 == y_12) ->
        let
          match_final_28_30 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_26])
        in
          case match_final_28_30 of
            x_31 | (x_31 == x_10) -> match_final_28_30
            _ -> (EXC.badmatch match_final_28_30)
      _ -> (EXC.badmatch match_expr_26)
erlps__rlp_byte_array_tagged_size_two_bytes_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__illegal_size_encoding_list_test__0 :: ErlangFun
erlps__illegal_size_encoding_list_test__0 [] =
  let   
    lop_2 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 192)), (ErlangInt (DBI.fromInt 55))])
  in let
    tag_6 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_8 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 42))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    x_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 56)), arg_8])
  in let y_12 = (BIF.erlang__list_to_binary__1 [x_10])
  in let s_14 = (BIF.erlang__byte_size__1 [y_12])
  in let
    match_expr_26 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_10])
  in
    case match_expr_26 of
      (ErlangBinary bin_c_16) | size_17 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_19 bin_18) <-
                                  ((BIN.chop_int bin_c_16 size_17 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_20) <-
                                  ((ErlangInt (DBI.fromInt 1)))
                              , (BIN.Ok s_22 bin_21) <-
                                  ((BIN.chop_int bin_18 size_20 8 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_23) <- ((BIN.size bin_21))
                              , (BIN.Ok y_25 bin_24) <-
                                  ((BIN.chop_bin bin_21 size_23 8))
                              , (BIN.empty bin_24)
                              , (tag_19 == tag_6)
                              , (s_22 == s_14)
                              , (y_25 == y_12) ->
        let
          match_expr_30 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_26])
        in
          case match_expr_30 of
            x_29 | (x_29 == x_10) ->
              let   
                bin_el_31 =
                  (BIF.erlang__op_plus [tag_6, (ErlangInt (DBI.fromInt 1))])
              in let
                e1_37 =
                  (ErlangBinary
                     (BIN.concat
                        [(BIN.from_int bin_el_31 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int (ErlangInt (DBI.fromInt 0))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int s_14 (ErlangInt (DBI.fromInt 1)) 8
                            BIN.Big),
                         (BIN.format_bin y_12 (BIN.packed_size y_12) 8)]))
              in let
                fun_38 =
                  (ErlangFun 0
                     let
                       lambda_39 [] =
                         (EXC.tryOfCatch
                            (\ _ ->
                               (BIF.do_remote_fun_call "Aeser.Rlp"
                                  "erlps__decode__1" [e1_37]))
                            (\ of_41 ->
                               case of_41 of
                                 __v_43 ->
                                   let   
                                     head_47 =
                                       (ErlangTuple
                                          [(ErlangAtom "module"),
                                           (ErlangAtom "aeser_rlp_tests")])
                                   in let
                                     head_51 =
                                       (ErlangTuple
                                          [(ErlangAtom "line"),
                                           (ErlangInt (DBI.fromInt 117))])
                                   in let
                                     tup_el_57 =
                                       (make_string
                                          "? TEST_MODULE : decode ( E1 )")
                                   in let
                                     head_55 =
                                       (ErlangTuple
                                          [(ErlangAtom "expression"),
                                           tup_el_57])
                                   in let lop_62 = (make_string "{ ")
                                   in let lop_64 = (make_string "error")
                                   in let lop_66 = (make_string " , ")
                                   in let
                                     lop_68 =
                                       (make_string "leading_zeroes_in_size")
                                   in let rop_69 = (make_string " , [...] }")
                                   in let
                                     rop_67 =
                                       (BIF.erlang__op_append [lop_68, rop_69])
                                   in let
                                     rop_65 =
                                       (BIF.erlang__op_append [lop_66, rop_67])
                                   in let
                                     rop_63 =
                                       (BIF.erlang__op_append [lop_64, rop_65])
                                   in let
                                     tup_el_61 =
                                       (BIF.erlang__op_append [lop_62, rop_63])
                                   in let
                                     head_59 =
                                       (ErlangTuple
                                          [(ErlangAtom "pattern"), tup_el_61])
                                   in let
                                     head_71 =
                                       (ErlangTuple
                                          [(ErlangAtom "unexpected_success"),
                                           __v_43])
                                   in let
                                     arg_44 =
                                       (ErlangTuple
                                          [(ErlangAtom "assertException"),
                                           (ErlangCons head_47
                                              (ErlangCons head_51
                                                 (ErlangCons head_55
                                                    (ErlangCons head_59
                                                       (ErlangCons head_71
                                                          ErlangEmptyList)))))])
                                   in (BIF.erlang__error__1 [arg_44])
                                 something_else ->
                                   (EXC.try_clause something_else))
                            (\ ex_42 ->
                               case ex_42 of
                                 (ErlangTuple [(ErlangAtom "error"),
                                               (ErlangAtom "leading_zeroes_in_size"),
                                               _]) ->
                                   (ErlangAtom "ok")
                                 (ErlangTuple [__c_75, __t_76, __s_77]) ->
                                   let   
                                     head_81 =
                                       (ErlangTuple
                                          [(ErlangAtom "module"),
                                           (ErlangAtom "aeser_rlp_tests")])
                                   in let
                                     head_85 =
                                       (ErlangTuple
                                          [(ErlangAtom "line"),
                                           (ErlangInt (DBI.fromInt 117))])
                                   in let
                                     tup_el_91 =
                                       (make_string
                                          "? TEST_MODULE : decode ( E1 )")
                                   in let
                                     head_89 =
                                       (ErlangTuple
                                          [(ErlangAtom "expression"),
                                           tup_el_91])
                                   in let lop_96 = (make_string "{ ")
                                   in let lop_98 = (make_string "error")
                                   in let lop_100 = (make_string " , ")
                                   in let
                                     lop_102 =
                                       (make_string "leading_zeroes_in_size")
                                   in let rop_103 = (make_string " , [...] }")
                                   in let
                                     rop_101 =
                                       (BIF.erlang__op_append
                                          [lop_102, rop_103])
                                   in let
                                     rop_99 =
                                       (BIF.erlang__op_append
                                          [lop_100, rop_101])
                                   in let
                                     rop_97 =
                                       (BIF.erlang__op_append [lop_98, rop_99])
                                   in let
                                     tup_el_95 =
                                       (BIF.erlang__op_append [lop_96, rop_97])
                                   in let
                                     head_93 =
                                       (ErlangTuple
                                          [(ErlangAtom "pattern"), tup_el_95])
                                   in let
                                     tup_el_107 =
                                       (ErlangTuple [__c_75, __t_76, __s_77])
                                   in let
                                     head_105 =
                                       (ErlangTuple
                                          [(ErlangAtom "unexpected_exception"),
                                           tup_el_107])
                                   in let
                                     arg_78 =
                                       (ErlangTuple
                                          [(ErlangAtom "assertException"),
                                           (ErlangCons head_81
                                              (ErlangCons head_85
                                                 (ErlangCons head_89
                                                    (ErlangCons head_93
                                                       (ErlangCons head_105
                                                          ErlangEmptyList)))))])
                                   in (BIF.erlang__error__1 [arg_78])
                                 ex_42 -> (EXC.raise ex_42)))
                       lambda_39 [] = (EXC.function_clause unit)
                       lambda_39 args =
                         (EXC.badarity (ErlangFun 0 lambda_39) args)
                     in lambda_39)
              in (BIF.erlang__apply__2 [fun_38, ErlangEmptyList])
            _ -> (EXC.badmatch match_expr_30)
      _ -> (EXC.badmatch match_expr_26)
erlps__illegal_size_encoding_list_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__illegal_size_encoding_byte_array_test__0 :: ErlangFun
erlps__illegal_size_encoding_byte_array_test__0 [] =
  let   
    lop_2 =
      (BIF.erlang__op_plus
         [(ErlangInt (DBI.fromInt 128)), (ErlangInt (DBI.fromInt 55))])
  in let
    tag_6 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [(ErlangInt (DBI.fromInt 256)), (ErlangInt (DBI.fromInt 42))])
  in let x_10 = (BIF.erlang__list_to_binary__1 [arg_7])
  in let s_12 = (BIF.erlang__byte_size__1 [x_10])
  in let
    match_expr_24 =
      (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__encode__1" [x_10])
  in
    case match_expr_24 of
      (ErlangBinary bin_c_14) | size_15 <- ((DBI.fromInt 8))
                              , (BIN.Ok tag_17 bin_16) <-
                                  ((BIN.chop_int bin_c_14 size_15 1 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_18) <-
                                  ((ErlangInt (DBI.fromInt 2)))
                              , (BIN.Ok s_20 bin_19) <-
                                  ((BIN.chop_int bin_16 size_18 8 BIN.Big
                                      BIN.Unsigned))
                              , (ErlangInt size_21) <- ((BIN.size bin_19))
                              , (BIN.Ok x_23 bin_22) <-
                                  ((BIN.chop_bin bin_19 size_21 8))
                              , (BIN.empty bin_22)
                              , (tag_17 == tag_6)
                              , (s_20 == s_12)
                              , (x_23 == x_10) ->
        let
          match_expr_28 =
            (BIF.do_remote_fun_call "Aeser.Rlp" "erlps__decode__1"
               [match_expr_24])
        in
          case match_expr_28 of
            x_27 | (x_27 == x_10) ->
              let   
                bin_el_29 =
                  (BIF.erlang__op_plus [tag_6, (ErlangInt (DBI.fromInt 1))])
              in let
                e1_35 =
                  (ErlangBinary
                     (BIN.concat
                        [(BIN.from_int bin_el_29 (ErlangInt (DBI.fromInt 8)) 1
                            BIN.Big),
                         (BIN.from_int (ErlangInt (DBI.fromInt 0))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                         (BIN.from_int s_12 (ErlangInt (DBI.fromInt 2)) 8
                            BIN.Big),
                         (BIN.format_bin x_10 (BIN.packed_size x_10) 8)]))
              in let
                fun_36 =
                  (ErlangFun 0
                     let
                       lambda_37 [] =
                         (EXC.tryOfCatch
                            (\ _ ->
                               (BIF.do_remote_fun_call "Aeser.Rlp"
                                  "erlps__decode__1" [e1_35]))
                            (\ of_39 ->
                               case of_39 of
                                 __v_41 ->
                                   let   
                                     head_45 =
                                       (ErlangTuple
                                          [(ErlangAtom "module"),
                                           (ErlangAtom "aeser_rlp_tests")])
                                   in let
                                     head_49 =
                                       (ErlangTuple
                                          [(ErlangAtom "line"),
                                           (ErlangInt (DBI.fromInt 131))])
                                   in let
                                     tup_el_55 =
                                       (make_string
                                          "? TEST_MODULE : decode ( E1 )")
                                   in let
                                     head_53 =
                                       (ErlangTuple
                                          [(ErlangAtom "expression"),
                                           tup_el_55])
                                   in let lop_60 = (make_string "{ ")
                                   in let lop_62 = (make_string "error")
                                   in let lop_64 = (make_string " , ")
                                   in let
                                     lop_66 =
                                       (make_string "leading_zeroes_in_size")
                                   in let rop_67 = (make_string " , [...] }")
                                   in let
                                     rop_65 =
                                       (BIF.erlang__op_append [lop_66, rop_67])
                                   in let
                                     rop_63 =
                                       (BIF.erlang__op_append [lop_64, rop_65])
                                   in let
                                     rop_61 =
                                       (BIF.erlang__op_append [lop_62, rop_63])
                                   in let
                                     tup_el_59 =
                                       (BIF.erlang__op_append [lop_60, rop_61])
                                   in let
                                     head_57 =
                                       (ErlangTuple
                                          [(ErlangAtom "pattern"), tup_el_59])
                                   in let
                                     head_69 =
                                       (ErlangTuple
                                          [(ErlangAtom "unexpected_success"),
                                           __v_41])
                                   in let
                                     arg_42 =
                                       (ErlangTuple
                                          [(ErlangAtom "assertException"),
                                           (ErlangCons head_45
                                              (ErlangCons head_49
                                                 (ErlangCons head_53
                                                    (ErlangCons head_57
                                                       (ErlangCons head_69
                                                          ErlangEmptyList)))))])
                                   in (BIF.erlang__error__1 [arg_42])
                                 something_else ->
                                   (EXC.try_clause something_else))
                            (\ ex_40 ->
                               case ex_40 of
                                 (ErlangTuple [(ErlangAtom "error"),
                                               (ErlangAtom "leading_zeroes_in_size"),
                                               _]) ->
                                   (ErlangAtom "ok")
                                 (ErlangTuple [__c_73, __t_74, __s_75]) ->
                                   let   
                                     head_79 =
                                       (ErlangTuple
                                          [(ErlangAtom "module"),
                                           (ErlangAtom "aeser_rlp_tests")])
                                   in let
                                     head_83 =
                                       (ErlangTuple
                                          [(ErlangAtom "line"),
                                           (ErlangInt (DBI.fromInt 131))])
                                   in let
                                     tup_el_89 =
                                       (make_string
                                          "? TEST_MODULE : decode ( E1 )")
                                   in let
                                     head_87 =
                                       (ErlangTuple
                                          [(ErlangAtom "expression"),
                                           tup_el_89])
                                   in let lop_94 = (make_string "{ ")
                                   in let lop_96 = (make_string "error")
                                   in let lop_98 = (make_string " , ")
                                   in let
                                     lop_100 =
                                       (make_string "leading_zeroes_in_size")
                                   in let rop_101 = (make_string " , [...] }")
                                   in let
                                     rop_99 =
                                       (BIF.erlang__op_append
                                          [lop_100, rop_101])
                                   in let
                                     rop_97 =
                                       (BIF.erlang__op_append [lop_98, rop_99])
                                   in let
                                     rop_95 =
                                       (BIF.erlang__op_append [lop_96, rop_97])
                                   in let
                                     tup_el_93 =
                                       (BIF.erlang__op_append [lop_94, rop_95])
                                   in let
                                     head_91 =
                                       (ErlangTuple
                                          [(ErlangAtom "pattern"), tup_el_93])
                                   in let
                                     tup_el_105 =
                                       (ErlangTuple [__c_73, __t_74, __s_75])
                                   in let
                                     head_103 =
                                       (ErlangTuple
                                          [(ErlangAtom "unexpected_exception"),
                                           tup_el_105])
                                   in let
                                     arg_76 =
                                       (ErlangTuple
                                          [(ErlangAtom "assertException"),
                                           (ErlangCons head_79
                                              (ErlangCons head_83
                                                 (ErlangCons head_87
                                                    (ErlangCons head_91
                                                       (ErlangCons head_103
                                                          ErlangEmptyList)))))])
                                   in (BIF.erlang__error__1 [arg_76])
                                 ex_40 -> (EXC.raise ex_40)))
                       lambda_37 [] = (EXC.function_clause unit)
                       lambda_37 args =
                         (EXC.badarity (ErlangFun 0 lambda_37) args)
                     in lambda_37)
              in (BIF.erlang__apply__2 [fun_36, ErlangEmptyList])
            _ -> (EXC.badmatch match_expr_28)
      _ -> (EXC.badmatch match_expr_24)
erlps__illegal_size_encoding_byte_array_test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test__0 :: ErlangFun
erlps__test__0 [] =
  (BIF.do_remote_fun_call "Eunit" "erlps__test__1"
     [(ErlangAtom "aeser_rlp_tests")])
erlps__test__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)